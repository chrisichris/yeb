/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeticl.yeticlassloadermodule;

import java.lang.ClassLoader;
import java.lang.ClassNotFoundException;
import java.lang.Thread;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import yeti.lang.compiler.CodeWriter;

eval = load yeti.lang.compiler.eval;

fileSourceReader baseDirs {name,fullpath}  =
    if fullpath or (empty? (baseDirs is list<string>)) then
        try (openInFile name "UTF-8").contents() catch Exception ex: undef_str yrt;
    else
        fold do v lv: if v == undef_str then
                        bd = if strEnds? lv "/" then lv else lv ^ "/" fi;
                        try (openInFile (bd ^ name) "UTF-8").contents() catch Exception ex: undef_str yrt;
                      else v fi
             done undef_str baseDirs;
    fi;

classSourceReader classLoader {name} is ~ClassLoader -> 'a -> 'b =
     (
     stream = classLoader#getResourceAsStream(if strStarts? name "/" then strRight name 1 else name fi);
     //println "yeticlassloadermodule.classSourceReader \(name) \(stream)";
     if nullptr? stream then
        undef_str;
     else
        try (inputHandle stream "UTF-8").contents() catch Exception ex: undef_str yrt
     fi);

delegateSourceReader readers arg =
    case readers of
        r::rest :
            (ret = r arg;
             if ret == undef_str then delegateSourceReader rest arg;
             else ret fi;);
        [r] : r arg;
        _ : undef_str;
    esac;

classParentLimitedSourceReader reader classLoader arg is 'a -> ~ClassLoader -> 'b -> 'c =
    (name = if strStarts? arg.name "/" then strRight arg.name 1 else arg.name fi;
    clName = strReplace '/' '.' (strLeft name (strLastIndexOf name '.' (strLength name)));
    r = try
        classLoader#loadClass(clName); undef_str
    catch ClassNotFoundException: reader arg
    catch Exception ex: throw ex;
    yrt;
    //println "yeticlassloadermodule.classParentLimitedSourceReader \(arg.name), \(clName),\n \(r)";
    r
    );

tetiSourceReader reader arg =
    (r = reader arg;
    //println "yeticlassloadermodule.tetiSourceReader \(arg.name): \(r)";
    if r == undef_str and (strEnds? arg.name ".yeti") then
        //retry with teti
        on = arg.name;
        arg.name := (strLeft on (strLength on - 5)) ^ ".teti";
        r2 = reader arg;
        if r2 == undef_str then
            arg.name := on;
            undef_str
        else
            TetiParser#parseTeti(arg.name, r2)
        fi;
    elif strEnds? arg.name ".teti" then
        TetiParser#parseTeti(arg.name,r);
    else
        r
    fi);

sourceReader sourceDirs readFromClassPath parentClassLoader =
    (r = if readFromClassPath then
        if empty? sourceDirs then classSourceReader parentClassLoader;
        else delegateSourceReader [fileSourceReader sourceDirs, classSourceReader parentClassLoader] fi;
     else fileSourceReader sourceDirs fi;
     tetiSourceReader r);



class YetiClassLoader(ClassLoader parentOrNull, String[] sourceDirsA, boolean readFromClassPath) extends
        ClassLoader(if nullptr? parentOrNull then Thread#currentThread()#getContextClassLoader() else parentOrNull fi), CodeWriter

    parent = if nullptr? parentOrNull then Thread#currentThread()#getContextClassLoader() else parentOrNull fi,
    sr = sourceReader (if nullptr? sourceDirsA then [] else map string (list (wrapArray sourceDirsA)) fi) readFromClassPath parent,
    reader = classParentLimitedSourceReader sr parent,
    classes = [:],

    void writeClass(String name, byte[] code) synchronized this \(
        cName = strReplace '/' '.' (strLeft name ((strLength name)-6));
        classes.[cName] := code;
        ()),

    Class findClass(String clName)
        if clName in classes then
            code = classes.[clName];
            this#defineClass(clName,code,0, length code);
        else
            flName = (strReplace '.' '/' clName) ^ ".yeti";
            if undef_str == (reader {var name = flName, fullpath = false}) then
                throw new ClassNotFoundException(clName);
            fi;
            oldCl = Thread#currentThread()#getContextClassLoader();
            Thread#currentThread()#setContextClassLoader(parent);
            try
                //println "findClass compiling \(clName)";
                eval.compileYetiFiles [CodeWriter (this as ~CodeWriter), SourceReader reader] [] [flName]
            finally
                Thread#currentThread()#setContextClassLoader(oldCl);
            yrt;

            if clName in classes then
                code = classes.[clName];
                this#defineClass(clName,code,0, length code);
            else
                throw new ClassNotFoundException(clName ^ "or" ^ flName);
            fi
       fi,

    InputStream getResourceAsStream(String path)
        superStream = super#getResourceAsStream(path);
        if (not (nullptr? superStream)) or (not (strEnds? path "class")) then
            superStream
        else
            clName = strReplace '/' '.' (strLeft path ((strLength path) - 6));
            if clName in classes then
                new ByteArrayInputStream(classes.[clName]);
            else
                try
                    this#loadClass(clName);
                    new ByteArrayInputStream(classes.[clName]);
                catch Exception ex:
                    () as ~ByteArrayInputStream;
                yrt
            fi;
        fi,


end;

new YetiClassLoader(() as ~ClassLoader ,() as ~String[],false);






{
    sourceReader,

}
    
