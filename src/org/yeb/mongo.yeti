module org.yeb.mongo;

import java.lang:Number;
import yeti.lang: AList, Struct, Tag, ByKey,GenericStruct;
import com.mongodb: DBCollection, 
                    BasicDBObject, 
                    DBCursor, 
                    DBObject;
import java.util: Map, HashMap, List, Iterator;


load org.yeb.std;
forkjoin = load org.yeb.forkjoin;


_fromDBO object = 
   (import java.util:List,HashMap,Map;
    
    o = object as ~Object;
    
    if nullptr? o then
         o;
    elif o instanceof Number then
        (number' o) as ~Object;
    elif o instanceof List then
        ((o unsafely_as ~List) |> mapJavaList (_fromDBO)) as ~Object;  
    elif o instanceof Map then
        ma = new HashMap();
        i = (o unsafely_as ~Map)#entrySet()#iterator();
        i#hasNext() loop
           (e = i#next() unsafely_as ~java.util.Map$Entry;
            value = _fromDBO (e#getValue() unsafely_as 'a);
            if not nullptr? value then
                ma#put(string e#getKey(), value);
            fi);
        if o instanceof DBObject then
            ma#put("_yongo_dbobject", o);
        fi;
        new HashStruct(ma);
    else
        o
    fi);

fromDBO object is ~DBObject -> 'a =
    (_fromDBO object) unsafely_as 'a;
 


_dbObject object = 
   (import yeti.lang:Num, FloatNum, RatNum,AList, ByKey, Struct, Tag;
    import java.util:ArrayList,Map;
    import com.mongodb:BasicDBObject;
   
    o = object as ~Object;
    if nullptr? o then
        o
    elif (o instanceof FloatNum) 
         or (o instanceof RatNum) then
        (o unsafely_as ~Num)#toBigDecimal();
    elif (o instanceof Num) then
        (o unsafely_as ~Num)#toBigInteger();
    elif o instanceof AList then
        jl = new ArrayList();
        for (o unsafely_as list<'a>) do v:
            _ = jl#add(_dbObject v);
        done;
        jl as ~Object;
    elif o instanceof ByKey then
        dbo = new BasicDBObject();
        i = (o unsafely_as ~Map)#entrySet()#iterator();
        i#hasNext() loop
            (e = i#next() unsafely_as ~java.util.Map$Entry;
             key = string (e#getKey());
             if not strStarts? key "_yongo_" then             
                dbo#append(key
                        , _dbObject (e#getValue() unsafely_as 'a))
             fi);
        dbo;
    elif o instanceof Struct then
        st = o unsafely_as ~Struct;
        dbo = new BasicDBObject();
        for [0 .. st#count() - 1] do i:
            name = st#name(i);
            if not strStarts? name "_yongo_" then
                value = _dbObject (st#get(i) unsafely_as 'a);
                _ = dbo#append(name, value);
            fi
        done;
        dbo;
    elif o instanceof Tag then
        t = o unsafely_as ~Tag;
        if t#name == "Some" then
            _dbObject (t#value unsafely_as 'a);
        elif t#name == "None" then
            () as ~Object;
        else
            failWith "Can not serialize \(o)"
        fi
    else
        o
    fi);
    
toDBO stru is 'a -> ~DBObject =
    _dbObject stru unsafely_as ~DBObject;
            
            
dbRef db  namespace id =
    new com.mongodb.DBRef(db, namespace, id);

dbRefFromObject db  stru = 
    new com.mongodb.DBRef(db, stru._yongo_dboject);


toList cursor is ~DBCursor -> list<'a> = 
   (it = cursor#iterator();
    fn () = 
        if it#hasNext() then
            fromDBO (it#next() unsafely_as ~DBObject) :. fn;
        else
            []
        fi;
    fn ());

nilDBO = {nilDBO="This is the nilDBO"};

nilDBO? dbo = same? dbo nilDBO;

count query col = 
    if nilDBO? query then
        (col is ~DBCollection)#count();
    else
        col#count(toDBO query);
    fi;

createIndex keys options col =
    if nilDBO? options then
        (col is ~DBCollection)#createIndex(toDBO keys);
    else
        (col is ~DBCollection)#createIndex(toDBO keys, toDBO options);
    fi;

find ref keys col =
    toList if nilDBO? keys then
        (col is ~DBCollection)#find(toDBO ref);
    else
        (col is ~DBCollection)#find(toDBO ref, toDBO keys);
    fi;

findAndModify opts query update col = 
   (var fields = () as ~DBObject;
    var sort = () as ~DBObject;
    var remove = false;
    var returnNew = false;
    var upset = false;
    
    for opts do opt:
        case opt of
        Fields f: fields := toDBO f;
        Sort f: sort := toDBO f;
        Remove b: remove := b;
        ReturnNew b: returnNew := b;
        Upset b : upset := b;
        esac
    done;
    fromDBO (col is ~DBCollection)#findAndModify(toDBO query, fields, sort, remove,
            toDBO update, returnNew, upset));
            
findAndRemove query col =
    fromDBO (col is ~DBCollection)#findAndRemove(toDBO query);
    
findOne o fields col = 
    fromDBO if nilDBO? fields then
        (col is ~DBCollection)#findOne(toDBO o);
    else
        (col is ~DBCollection)#findOne(toDBO o, toDBO fields);
    fi;

findOneById object fields col =
   (o = object as ~Object;
    fromDBO if nilDBO? fields then
        (col is ~DBCollection)#findOne(o);
    else
        (col is ~DBCollection)#findOne(o, toDBO fields);
    fi);
    
group key cond initial reduce finalize col =
    fromDBO ((col is ~DBCollection)#group(toDBO key, toDBO cond, toDBO initial,
                reduce is string, maybe (() as ~String) id finalize));

insert values col =
    (col is ~DBCollection)#insert(map toDBO values);
    
remove value col =
    (col is ~DBCollection)#remove(toDBO value);

save value col =
    (col is ~DBCollection)#save(toDBO value);


     
task con monitor mapFn fn =
	forkjoin.map mapFn (forkjoin.asyncTask [] monitor \(fn con));
     
{
    toDBO,
    fromDBO,
    toList,
    dbRef,
    dbRefFromObject,
    nilDBO, 
    nilDBO?, 
    count, 
    createIndex, 
    find, 
    findAndModify,
    findAndRemove, 
    findOne, 
    findOneById, 
    group, 
    insert, 
    remove, 
    save,

	task,
	invoke con monitor fn = forkjoin.invoke (task con monitor id fn),
    
}
