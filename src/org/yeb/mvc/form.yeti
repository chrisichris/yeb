/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.form;

//+++++++++++++++++++++Form+++++++++++++++++++++++++++++

import org.yeb.Message;

load org.yeb.std;
load org.yeb.mvc.webutils;
load org.yeb.validation;


handlerModule = load org.yeb.mvc.handler;

 

//++++++++++++++++++++++++view things +++++++++++++++++

typedef field<a> = {
    name is string,
    unprefixedName is string,
    converter is valiType<string,a>,
    toString is a -> string,
    var values is list<a>,
    var displayStrings is list<string>,
    var errors is list<~Message>,
    minValues is number,
    maxValues is number,
    clear is () -> (),
    read is request -> (),
};

typedef formField = {
    read is request -> (),
    errors is list<~Message>,
}

typedef form = {
    fieldPrefix is string,
    var fields is array<formField>,
    var errors is array<~Message>,
    read is request -> (),
    formErrors is  list<~Message>,
    formErrors? is boolean,

}


createForm fieldPrefix is string -> form = {
    fieldPrefix,
    var fields is array<formFieldType> = array [],
    var errors = array [],
    read req =
        for fields do f: f.read req;done,
    get formErrors ()  =
        errors ++ (concatMap do f: f.errors done fields),
    get formErrors? () =
        if empty? errors then
            fold 
                do r f: r or (not empty? f.errors) done
                false fields;
        else
            true;
        fi,
};

createField minValues maxValues form unprefixedName converter toString
        is number -> number -> form -> string -> (string -> 'a) -> 
            ('a -> string) -> field<'a> =
    (var _values is list<'a> = [];
    f = {
        name = form.fieldPrefix ^ unprefixedName,
        unprefixedName,
        converter,
        toString,
        get values () = _values,
        set values vs = (
            //set the values
            _values := vs;

            //set the displayStrings
            displayStrings := (vs |> map toString);
        ),

        var displayStrings is list<string> = [],
        var errors is list<~Message> = [],

        minValues,
        maxValues,
        clear () is () -> ()= (
            _values := [];
            displayStrings := [];
            errors := [];
        ),
        read req = (
            clear();
            ps = (handlerModule.params name req);
            if not empty? ps then
                //remember the stringValues
                displayStrings := ps;

                //convert the string values
                for ps (validateFn do ex: 
                            errors := ex#getMessageObject() :: errors 
                        done
                        do r: 
                            _values := r :: _values 
                        done
                        converter);

                //if there are errors forget the values
                errors := reverse errors;
               _values := reverse _values;

            else
                displayStrings := [];
                _values := [];
                errors := [];
            fi;
            //check the min size
            if (length _values) < minValues then
                m =  (message "fewvalues" "Not enough values: must be at least %1$s but where %2$s" [obj minValues, obj (length _values)]);
                errors := m :: errors;
            fi;
            if (maxValues > -1) and ((length _values) > maxValues) then
                m = (message "manyvalues" "Too many values: must be maximal %1$s but where %2$s" [obj maxValues, obj (length _values)]);
                errors := m :: errors;
            fi;
            if not empty? errors then
                _values := [];
            fi;
        ),

    };

    ff = {
        read req = f.read req,
        get errors () = f.errors
    };
    push form.fields ff;
    f;
);

listField min max form unprefixedName converter toString
    is number -> number -> formType -> string -> (string -> 'a) ->('a -> string) -> 'b=(
    f = createField min max form unprefixedName converter toString;
    //f;
    f with {
              eitherValue _ is 'b -> (Left list<~Message> | Right list<'a>) =
                if empty? f.errors then
                    Some f.values
                else
                    Errors f.errors;
                fi,
              get value () =
                    case eitherValue () of
                        Errors ma: throw new org.yeb.MessageException(head ma);
                        Some v: v;
                    esac,
              set value values = f.values := values
           }
);

optionalField form unprefixedName converter toString= (
    f = listField 0 (-1) form unprefixedName converter toString;
    f with {
              eitherValue _ = case f.eitherValue () of
                        Errors m: Errors m;
                        Some li: Some (maybeHead None Some li);
                    esac,
              get value () =
                    case eitherValue () of
                        Erorrs ma: throw new org.yeb.MessageException(head ma);
                        Some v: v;
                    esac,
              set value opt = f.values := catSome [opt],
              set displayString str = f.displayStrings := [str],
              get displayString () = if empty? f.displayStrings then "" else head f.displayStrings fi,
           }
);

requiredField form unprefixedName converter toString= (
    f = listField 1 (-1) form unprefixedName converter toString;
    f with {
              eitherValue _ =
                   if not empty? f.errors then
                      Errors (array [(message "novalue" "no value in field %1$s" [obj f.unprefixedName])])
                   else
                      Some (head f.values)
                   fi,

              get value () =
                    case eitherValue () of
                        Errors ma: throw new org.yeb.MessageException(head ma);
                        Some v : v;
                    esac,
              set value value = f.values := [value],
              set displayString str = f.displayStrings := [str],
              get displayString () = if empty? f.displayStrings then "" else head f.displayStrings fi,
           }
);

{
createForm, createField,
listField,optionalField,requiredField
}
