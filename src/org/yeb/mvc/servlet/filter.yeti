/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.servlert.filter;

import java.lang: Thread, 
                  System,
                  ClassLoader,
                  ClassNotFoundException;
import java.util.concurrent:ConcurrentHashMap,
                            ForkJoinPool;
import java.io.File;

import javax.servlet: ServletContext, 
                      Filter, 
                      FilterConfig, 
                      FilterChain, 
                      ServletRequest, 
                      ServletResponse, 
                      ServletException,
                      AsyncContext;
import javax.servlet.http: HttpServletRequest, 
                           HttpServletResponse,
                           HttpUtils;

import yeti.lang: Fun, Struct;
import yeti.lang.compiler: CompileException;

import org.yeb: YetiClassLoader;
import org.yeb.YebUtils;

load org.yeb.std;

//compile = load yeti.lang.compiler.yeb;

log = getLogger "org.yeb.filter";

load org.yeb.mvc.webutils;
mvc = load org.yeb.mvc.handler;
configModule = load org.yeb.mvc.config;
forkjoin = load org.yeb.forkjoin;


//helper to invoke with classloader


typedef mainWebModuleType = {   destroy is () -> (),
                                handler is handler,
                            };
typedef mainModuleType = { destroy is () -> ()}

enumToList enum transFn = 
    (import java.util.Enumeration;
    ret = array [];
    ((enum is ~Enumeration)#hasMoreElements()) loop
        push ret (transFn (enum#nextElement()));
    list ret);

_http_session_key = "org.yeb.web.session";
_file_forward_marker = "org.yeb.web.servlet.file_forward";

asyncContextToReq ac pathInfo=
    (req = ((ac is ~AsyncContext)#getRequest() unsafely_as ~HttpServletRequest);
    query = 
        if not defined? req#getQueryString() then 
            ""
        else
            req#getQueryString()
        fi;
    req = {
    remoteAddr = req#getRemoteAddr(),
    headers = 
        (names = enumtToList req#getHeaderNames() string;
        ret = [:];
        for names do name:
            ret.[name] := enumToList (req#getHeaders()) string;
        done),
    uri = HttpUtils#getRequestURL(req),
    path = req#getRequestURI(),
    method = strUpper req#getMethod(),
    query,
    locales = enumtToList req#getLocales() id,
    params = parseQuery query,
    session = 
        (sess = req#getSession(false);
        if not defined? session then
            [:]
        else
            ret = sess#getAttribute(_http_session_key);
            if not defined? ret then
                [:]
            else
                ret unsafely_as hash<string,~Object>
            fi;
        fi)
    sessionId =
        (if defined? req#getSession(false) then
            req#getSession()#getId();
        else
            undef_str;
        fi),
    cookies = 
        req#getCookies() |> map do cookie:
            {comment = cookie#getComment(),
            domain = cookie#getDomain(),
            maxage = cookie#getMaxAge(),
            path = cookie#getPath(),
            name = cookie#getName(),
            secure = cookie#getSecure(),
            value = cookie#getValue(),
            version = cookie#getVersion(),
            delete = false} is cookie
        done,
    body = 
        (cT = req#getContentType();
        if cT == "application/x-www-form-urlencoded" then
            con = (inputHandle req#getInputStream()).content ();
            Params (parseQuery con);
        //elif cT == "multipart/form-data" then
        else    
            bi = binInputHandle (req#getInputStream());
            Bytes (binReadAll (50 * 1024) bi do bs n: bs done)
        fi),
    };
    res = {
        var statusCode = 200,
        headers = [:],
        var body = none,
        session = copy req.session,
        cookies = array []
    };
    //clear flash
    res.session.[flashKey] := [:] as ~Object;
    req = req with {
        response = res,
        respond response = 
            (res = ac#getResponse() unsafely_as ~HttpServletResponse;
            res#setStatus(response.statusCode);
            forHash response.headers do n v:
                res#setHeader(n,v);
            done;
            if defined? req#getSession(false)
                or not empty? response.session then
                req#getSession()#put(_http_session_key, response.session);
            fi;
            for cookies do co:
                import java.servlet.http.Cookie;
                jco = new Cookie(co.name, co.value);
                jco#setComment(co.comment);
                jco#setDomain(co.domain);
                jco#setMaxAge(co.maxage);
                jco#setPath(co.path);
                jco#setSecure(co.secure);
                jco#setVersion(co.version);
                if co.delete then
                    jco#setMaxAge(0);
                fi;

                res#addCookie(jco);
            done;
            case response.body of
            Bytes bytes:
                res#getOutputStream()#write(bytes is ~byte[]);
                flushBuffer();
            String str:
                res#getWriter()#write(str);
                flushBuffer();
            None _:
                ();
            File fl:
                failWith "Can not serve file"
            esac;
            ac#complete());
    };
    req is request)


withClassLoader cl f is ~ClassLoader -> (() -> 'a) -> 'a= 
    (oldCl = Thread#currentThread()#getContextClassLoader();
    try
        Thread#currentThread()#setContextClassLoader(cl);
        f ();
    finally
        Thread#currentThread()#setContextClassLoader(oldCl);
    yrt);

printError exIn srcs resp =
   (import java.lang:Throwable, StackTraceElement;
    import yeti.lang.compiler.CompileException;

    wr = (resp is ~HttpServletResponse)#getWriter();
    wr#print("<html><head></head><body>");
        
    if (exIn is ~Exception) instanceof CompileException then
        wr#print("<h2>Error compiling code:</h2>");
        msg = exIn#getMessage();
        matched = like '([^:]+):(\d+):(\d+):(.*)' msg ();
        if not empty? matched then
            sourceFile = matched.[1];
            lineNumber = number matched.[2];
            
            wr#print("<h4>\(sourceFile) at line: \(lineNumber) "
                     ^ "column: \(matched.[3])</h3>");
            wr#print("<p>\(matched.[4])</p>");
            case findCodeAtLine srcs sourceFile lineNumber 4 of
            None _ : ();
            Some {fileName, lines, lineNumber, fromLineNumber, toLineNumber}:
               (wr#print('<pre class="codelines">');
                var i = fromLineNumber;
                for lines do line:
                    wr#print("\(i): \(line)\n");
                    i := i +1; 
                done;
                wr#print('</pre>'));
            esac;
        else
            wr#print("<p>\(mvc.escape msg)</p>");
        fi;
    else
        wr#print("<h2>Exception happend</h2>");
        exStack = 
            (rf ex1 exls = if nullptr? (ex1 is ~Throwable) then 
                        exls 
                    else 
                        rf ex1#getCause() (ex1 :: exls) 
                    fi;
            reverse (rf exIn []));
        for exStack do ex1:
            wr#print("<h4>\(ex1):</h4><ul>");
            for ex1#getStackTrace() do ste:
                wr#print("<li>\(string ste)");
                case findCodeAtLine srcs ste#getFileName() ste#getLineNumber() 4 of
                None _ : ();
                Some {fileName, lines, lineNumber, fromLineNumber, toLineNumber}:
                   (wr#print('<pre class="codelines">');
                    var i = fromLineNumber;
                    for lines do line:
                        wr#print("\(i): \( line) \n");
                        i := i +1; 
                    done;
                    wr#print('</pre>'));
                esac;
                wr#print("</li>");
            done
        done
    fi;
    wr#print("</body></html>");
    wr#flush();
    wr#close());


// printError ex srcs resp =
    // (wr = (resp is ~HttpServletResponse)#getWriter();
    // wr#print("<html><head></head><body><h1>Exception: </h1>");
    // import java.io: PrintWriter, StringWriter;
    // strW = new StringWriter();
    // (ex is ~Exception)#printStackTrace(new PrintWriter(strW,true));
    // str = mvc.escape (string strW);
    // wr#print(str);
    // wr#print("</body></html>");
    // );



class YebFilter extends javax.servlet.Filter

    unhandledPathes = array ["static/", "css/", "js/", "img/","favicon.ico"],

    var mainModuleName = "yebMain",
    var mainWebModuleName = "yebWebMain",
    var yebWebSrcDir = "yebwebsrc",

    var fileWatcher = () unsafely_as ~java.nio.file.WatchService,
    
    var dynamicReload = true,
    var forceReload = true,
    
    pathHelper = new org.springframework.web.util.UrlPathHelper(),

    loadMutex = new Object(),
    var filterConfig = () as ~FilterConfig,
    var servletContext = () as ~ServletContext,

    var mainModule is mainModuleType = {
        destroy _ = ()
        },

    var mainWebModule is mainWebModuleType = { 
                        init _ = (), 
                        destroy _ = (), 
                        handler = \false
                        },
    var mainWebModuleModified = -1,
    var mainWebHandler is handlerType = \false,
    var mainWebModuleClassLoader = () as ~ClassLoader,
    var forkJoinPool = () as ~ForkJoinPool,


    loadWebModule cl is ~ClassLoader -> 'a = 
       (oldCl = mainWebModuleClassLoader;
        mainWebModuleClassLoader := cl;

        withClassLoader oldCl mainWebModule.destroy;
        log#debug("yebWebMain module destroyed");


        withClassLoader cl 
            \(try
                    _ = cl#loadClass(mainWebModuleName);
            catch ClassNotFoundException ex:
                s = ("Could not load yebWebMain. Please make sure that"
                  ^"[\(mainWebModuleName)] is in directory [\(yebWebSrcDir)]");
                log#error(s);
                throw ex;
            yrt;
            
            try
                mainWebModule := (YebUtils#moduleLoad(cl, mainWebModuleName))
                        unsafely_as mainWebModuleType;
                log#debug("initialized yebWebMain module "
                         ^"[\(mainWebModuleName)] with classLoader [\(cl)]");
            catch ClassNotFoundException ex:
                throw ex;
            yrt;
            mainWebHandler := mainWebModule.handler)),



    void init(FilterConfig fc)
        filterConfig := fc;
        configModule.filterConfig := fc;
        servletContext := fc#getServletContext();
        
        if defined? fc#getInitParameter("unhandledPathes") then
            pa = strSplit "," (string fc#getInitParameter("unhandledPathes"))
                |> map strTrim;
            for pa (push unhandledPathes);
        fi;
        
        forkJoinSize = if defined? fc#getInitParameter("poolSize") then
            pa = int (number fc#getInitParameter("poolSize"));
        else
            Runtime#availableProcessores * 3;
        fi
        forkJoinPool := new ForkJoinPool(forkJoinSize);
        
        if defined? fc#getInitParameter("yebMainModule") then
            mainModuleName := 
                strTrim (string fc#getInitParameter("yebMainModule"));
        fi;

        if defined? fc#getInitParameter("yebWebModule") then
            mainWebModuleName := 
                strTrim (string fc#getInitParameter("yebWebModule"));
        fi;
        
        if defined? fc#getInitParameter("yebWebSrcDir") then
            yebWebSrcDir := 
                strTrim (string fc#getInitParameter("yebWebSrcDir"));
        fi;

        //the file Watcher
            
        
        
        mainWebModuleClassLoader := 
            Thread#currentThread()#getContextClassLoader();

        //load the mainmodule form the standard classpaht
        hasMainModule = try 
            _ = Thread#currentThread()#getContextClassLoader()
                        #loadClass(mainModuleName); 
            mainModule := YebUtils#moduleLoad(
                                Thread#currentThread()#getContextClassLoader(),
                                mainModuleName) 
                            unsafely_as mainModuleType;
            log#debug("yebMain module [\(mainModuleName)] initialized");
            true
        catch ClassNotFoundException: 
            log#debug("No yebMain module [\(mainModuleName)] found");
            false
        yrt;
        
        //load the webmodule if not development
        dynamicReload := 
            (configModule.webDynamicReload?) and (strLength yebWebSrcDir > 0);
        
        if dynamicReload then
            import java.nio.file:FileSystems, 
                                StandardWatchEventKinds;
            
            fileWatcher := FileSystems#getDefault()#newWatchService();

            registerDirs file is ~File -> () = 
                if file#isDirectory() then
                    _ = file#toPath()#register(fileWatcher, 
                                     [StandardWatchEventKinds#ENTRY_CREATE,
                                      StandardWatchEventKinds#ENTRY_DELETE,
                                      StandardWatchEventKinds#ENTRY_MODIFY]);
                   for (array file#listFiles()) registerDirs;
                fi;
            registerDirs new File(yebWebSrcDir);
            
        else
            log#info("auto web realoding is off");
            ycl = if (new File(string yebWebSrcDir)#exists()) then
                    log#debug(
                        "Loading module from yebWebSrcDir \(yebWebSrcDir)"); 
                    new YetiClassLoader(
                        Thread#currentThread()#getContextClassLoader(), 
                        array [string yebWebSrcDir], false);
                else
                    Thread#currentThread()#getContextClassLoader()
                fi;
            loadWebModule ycl
        fi;

        log#info("YebFilter started \(if hasMainModule then "with mainModule [\(mainModuleName)] " else " without mainModule " fi), dynamicReload: \(dynamicReload)"),


    void destroy()
        withClassLoader mainWebModuleClassLoader mainWebModule.destroy;
        mainModule.destroy ();
        log#info("YebFilter was shutdown"),

    void doFilter(ServletRequest sreq, 
                  ServletResponse sres, 
                  FilterChain filterChain)
        if (sreq instanceof HttpServletRequest) 
            and (sres instanceof HttpServletResponse) then
            req = sreq unsafely_as ~HttpServletRequest;
            res = sres unsafely_as ~HttpServletResponse;
            if not nullptr? req#getAttribute("org.yeb.UnhandledDispatch") then
                log#debug("Dispatched path");
                filterChain#doFilter(req,res);
            else 
                pathInfo = (
                    p = pathHelper#getPathWithinApplication(req);
                    p = if strStarts? p "/" then strRight p 1 else p fi;
                    if strEnds? p "/" then 
                        strLeft p ((strLength p) - 1) 
                    else 
                        p 
                    fi);
            
                if any do n:strStarts? pathInfo n done unhandledPathes then
                    log#debug("Not handling {}",pathInfo);
                    filterChain#doFilter(req,res);				
                else
                    try 
                        
                        var cl = mainWebModuleClassLoader;
                        var handler = mainWebHandler;
                        if dynamicReload then
                            //relaod the mainmodule if necessery
                            //this method checks for last modified
                            
                            synchronized loadMutex \(
                                var watchKey = fileWatcher#poll(); 
                                if defined? watchKey then
                                    forceReload := true;
                                    _ = watchKey#pollEvents();
                                    _ = watchKey#reset();
                                fi;
                                if forceReload then
                                    forceReload := false;
                                    log#debug("Code was modified. Reloading"
                                        ^"yeti-code in directory: "
                                        ^ yebWebSrcDir);
                                    
                                    ycl = new YetiClassLoader(
                                        Thread#currentThread()
                                            #getContextClassLoader(), 
                                        array [string yebWebSrcDir], false);
                                    loadWebModule ycl;
                                    cl := mainWebModuleClassLoader;
                                    handler := mainWebHandler;
                                fi);
                        fi;


                        //invoke the mainhandler here but with the 
                        //main class loader
                        
                        //lookup the subhandlers
                        log#debug("starting async context");

                        asyncContext = req#startAsync(req,res);
                        creq = asyncContextToReq pathInfo asyncContext;
                        forkJoinPool#execute (runnable \(withClassLoader cl do:
                            log#debug("handling path [{}]",pathInfo);
                            r = try
                                handler creq;
                            catch Exception ex:
                                if dynamicReload then
                                    printError ex [yebWebSrcDir] res;
                                    //{status = 500};
                                    throw ex;
                                else
                                    throw ex;
                                fi;
                            yrt;
                            ();
                            if not r then
                               (log#debug("could not handle path [{}]: daspatching",pathInfo);
                                req#setAttribute("org.yeb.UnhandledDispatch", "dispatch");
                                asyncContext#dispatch());
                            else
                                log#debug("handling context path: {}", pathInfo);
                            fi;
                        done));
                                
                        ()
                    catch Exception ex:
                        if dynamicReload then
                            printError ex [yebWebSrcDir] res;
                            //{status = 500};
                            if ex instanceof CompileException then
                                log#error("Comile Error:" ^ ex#getMessage());
                            else
                                throw ex;
                            fi;
                        else
                            throw ex;
                        fi;
                    yrt    
                        
                fi;
            fi
        else
            filterChain#doFilter(sreq,sres)
        fi;
   

end;

1
