/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.webutils;

import java.lang:Character;
import java.net:URLEncoder, URLDecoder;
import javax.servlet.AsyncContext;
import javax.servlet.http:HttpServletRequest, 
                          HttpServletResponse, 
						  Cookie, 
						  HttpSession;
import org.owasp.esapi:ESAPI,HTTPUtilitiess;

load org.yeb.std;
load org.yeb.validation;

typedef cookie = {
    comment is string,
    domain is string,
    maxage is number,
    path is string,
    secure is string,
    value is string,
    version is number,
    delete is boolean,
};


typedef response = {
    var statusCode is number,
    headers is hash<string,list<string>>,
    var body is File string | Bytes ~byte[] | String string | None (),
    session is hash<string,~Object>,
    cookies is array<cookie>
};

typedef request = {
    serverPort is number,
    serverName is string,
    remoteAddr is string,
    headers is hash<string, list<string>>,
    uri is string,
    path is string,
    pathInfo is string,
    queryString is string,
    scheme is string,
    method is string,
    locale is ~Locale,
    sslClientCertificate is None () | Some string,
    body is Bytes ~byte[] | None () | Parts list<File string | Bytes ~byte[]>,
    params is hash<string,list<string>>,
    bodyParams is hash<string, list<string>>,
    session is hash<string, ~Object>,
    cookies is list<cookie>,
    res is response,
    respond is response -> (),
};


typedef handler = request -> boolean;

typedef handlerAdapter = handler -> handler;

request {serverPort, serverName, method,uri,path, queryString, headers} =
    {serverPort,
    serverName,
    remoteAddr,
    headers,
    uri,
    path,
    pathInfo = path,
    queryString,
    scheme = "http",
    method,
    locale = ~Locale#getDefault(),
    sslClientCertificate = none,
    body = none,
    params = [:],
    session = [:],
    res = {
        var statusCode = 200,
        headers = [:],
        var body = none,
        sessionValues = [:],
        cookies = array []},
    cookies = [],
    respond res = ()} is request;
        
cookie name value = 
    {comment = undef_str,
    domain = undef_str,
    maxage = ~Long#maxValue,
    path = undef_str,
    secure = false,
    value,
    version = 0,
    delete = false} is cookie;

response req statusCode headers body =
    {statusCode, headers, body, sessionValues = req.sessionValues} is response,
    

params name req =
    (ps = if name in (req.params) then
        req.params.[name];
    else
        [] is list<string>
    fi
    bps = if name in (req.bodyParams) then
        req.bodyParams.[name];
    else
        []
    fi;
    ps ++ bps);

maybeParam name falseFn valiFn ctxt =
    (ls = params name ctxt;
    if empty? ls then
        valiFn (head ls);
    else
        falseFn ();
    fi);

param name ctx = 
   (ls = params name ctx;
   if not empty? params then
       head params;
    else
        failWithValidation 
            (message "noparam" "No request-parameter for name %1$s" [obj name]) 
            "";
    fi);

isAjax ctxt = 
   (h = (request ctxt)#getHeader("X-Requested-With");
    if defined? h and (strLower h) == "xmlhttprequest" then
        true;
    else
        false
    fi);

escape text =
    (escapeT s =
         "&#\(Character#codePointAt(s.[0] is string, 0));";
     strJoin '' (matchAll '[<>&"]' escapeT id "\(text)"));

//"     
    
redirectView path req = 
   (response req 301 ["Location":[path]] none);

statusView status req = 
    response req status [:] none;


okView req =
    statusView 200 req;

write req contentType content =
    response req 200 [Content-Type:[contentType^"; charset=utf-8"]
        (String content);

newWriter () =
    (import java.lang.StringBuilder;
    stb = new StringBuilder();
    {
        write str = stb#append(escape str),
        echo str = stb#append(str is string),
        stringBuilder = stb,
        get value () = stb#toString() as string
    });

writeHtml req content =
    write req "text/html" content;

writeJson req json =
    write req "application/json" ((load org.yeb.json).write [] json);

cacheForSeconds res = (
    headers = res.headers;
    res = response ctx;
    if seconds > 0 then
        //HTTP1.0 header
        headers.["Expires"]:= 
            [string (System#currentTimeMillis() + (seconds * 1000))];
        //HTTP1.1 header
        hv = "max-age=\(seconds)\(if mustRevalidate then ", must revalidate" else ""fi)";
        headers.["Cache-Control"] := hv;
    else
        headers.["Pragma"] := ["no-cache"];
        headers.["Expires"] := ["1"];
        headers.["Cache-Control"]:= ["no-cache","no-store"];
    fi;
);

//+++++++++++++++++++++++Utils ++++++++++++++++++++++++++++


urlEncode str = URLEncoder#encode(str,"UTF-8");
urlDecode str = URLDecoder#decode(str,"UTF-8");

url strList = (
    if empty? strList then
        ""
    else
        strb = new java.lang.StringBuilder();
        var hasQuestion = false;
        var isName = false;
        var isFirstName = false;
        for strList do str:
            if (not hasQuestion) then
                cut = strIndexOf str "?" 0;
                if cut == ((strLength str )- 1) then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    hasQuestion := true;
                    isName := true;
                    isFirstName := true;
                elif cut == 0 then
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                elif cut > 0 then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                else
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);();
                fi
            else
                if isName then
                    if not isFirstName then strb#append("&"); fi;
                    strb#append(str);
                    strb#append("=");
                    isName := false;
                else
                    r = urlEncode str;
                    strb#append(r);
                    isName := true;
                fi
           fi
       done;
       strb#toString();
   fi;
);

urlParam str name value = (
    hasQuestion = (strIndexOf str "?" 0) > -1;
    strb = new java.lang.StringBuilder(str);
    if hasQuestion then
        strb#append("&");
    else
        strb#append("?");
    fi;
    strb#append(name)#append("=")#append(urlEncode value);
    string strb;
);


ptag name params content is string -> hash<string,string> -> list<string> -> string = (
    var strb = new java.lang.StringBuilder();
    strb := strb#append("<")#append(escape name);
    forHash params do k v:
        strb := strb#append(" ")#append(escape k)#append('="')#append(escape v)#append('"');
    done;
    if empty? content then
        strb := strb#append("/>");
    else
        strb := strb#append(">")#append(strJoin "\n" content)#append("</")#append(name)#append(">");
    fi;
    strb#toString();
);
    
flashKey = "org.yeb.session.flash";

getFlash name req =
    (if flashKey in req.res.session then
        s = req.res.session.[flashKey];
        if name in s then
            Some s.[name];
        else
            none
        fi
    elif flashKey in req.session then
        s = req.session.[flashKey];
        if name in s then
            Some s.[name];
        else
            none
        fi
    else
        none;
    fi);

{

    HEADER_PRAGMA = "Pragma",
    HEADER_EXPIRES = "Expires",
    HEADER_CACHE_CONTROL = "Cache-Control",
	
    flashKey,
    getFlash,
    redirectView, 
    forwardView,
    statusView, 
    errorView, 
	echoView,
	echoJSON,
    echo,

    contentType, 
    headers, 
    responseWriter,
    htmlView,

    cacheForSeconds,

    urlEncode,
    urlDecode, 
    url,
    urlParam,

    escape,
    (@) text = escape text,

    ptag,

    request,
    response,
    asyncContext,
    servletContext,
    locale,
    session ctxt = ((request ctxt)#getSession(true)) is ~HttpSession,
    maybeSession ctxt = 
        maybeDefined None Some 
                    ((request ctxt)#getSession(false) is ~HttpSession),

    params, 
    param, 
    maybeParam, 
    allParams,
    isAjax,

    newCookie opts name value  =
        (cookie = new Cookie(name is string,value is string);
         for opts do opt: case opt of
            Comment c: cookie#setComment(c is string);
            Domain d: cookie#setDomain(d is string);
            MaxAge n: cookie#setMaxAge(n is number);
            Path p: cookie#setPath(p is string);
            Secure s: cookie#setSecure(s is boolean);
            Version v: cookie#setVersion(v is number);
         esac done;
         cookie),
    
    
    addCookie cookie ctxt = ESAPI#httpUtilities()#addCookie(response ctxt, cookie),

    setCookie opts name value ctxt = addCookie (newCookie opts name value) ctxt, 

    maybeCookie nofn somefn name ctxt = 
       (cs = (request ctxt)#getCookies();
        if not defined? cs then
            nofn()
        else
            ar = wrapArray cs;
            if empty? ar then
                nofn();
            else
                somefn (head ar);
            fi
        fi),
    
    decryptHiddenField encrypted = string (ESAPI#httpUtilities()#decryptHiddenField(encrypted is string)),
    decryptQueryString encrypted = 
       (ret = [:];
        forJavaMap (ESAPI#httpUtilities()#decryptQueryString(encrypted)) do k v:
              ret.[string k] := string v;
        done;
        ret),
    encryptHiddenField value = 
        string (ESAPI#httpUtilities()#encryptHiddenField(value is string)),
    encryptQueryString value = 
        string (ESAPI#httpUtilities()#encryptQueryString(value is string)),


    encodeForBase64 bytes wrap = 
        string ESAPI#encoder()
            #encodeForBase64(bytes is ~byte[],wrap is boolean),
    decodeFromBase64 str = 
        ESAPI#encoder()#decodeFromBase64(str is string),
    encodeForCSS str = 
        ESAPI#encoder()#encodeForCSS(str is string),
    encodeForHTML str = 
        ESAPI#encoder()#encodeForHTML(str is string),
    encodeForHTMAttribute str = 
        ESAPI#encoder()#encodeForHTMLAttribute(str is string),
    encodeForURL str = 
        ESAPI#encoder()#encodeForURL(str is string),
    encodeForXML str = 
        ESAPI#encoder()#encodeForXML(str is string)
}
