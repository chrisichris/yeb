/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.webutils;

import java.lang:Character;
import java.net:URLEncoder, URLDecoder;
import javax.servlet.AsyncContext;
import javax.servlet.http:HttpServletRequest, 
                          HttpServletResponse, 
						  Cookie, 
						  HttpSession;
import org.owasp.esapi:ESAPI,HTTPUtilitiess;

load org.yeb.std;
load org.yeb.validation;

notHandled = NotHandled "";

asyncContext c = (c.asyncContext) is ~AsyncContext;
request c = c.req is ~HttpServletRequest;
response c = c.res is ~HttpServletResponse;
servletContext c = (c.ctxt) is ~ServletContext;
locale c = (request c)#getLocale();



params name ctx = 
 (ps = (request ctx)#getParameterValues(name);
  if defined? ps then
    map' string (wrapArray ps);
  else
    []
  fi);


param name ctx = 
   (par = (request ctx)#getParameter(name);
    if defined? par then
        string par;
    else
        failWithValidation 
            (message "noparam" "No request-parameter for name %1$s" [obj name]) 
            "";
    fi);


maybeParam name falseFn valiFn ctxt =
    (par = (request ctxt)#getParameter(name);
    if defined? par then
        valiFn (string par);
    else
        falseFn ()
    fi);

allParams ctxt =
   (jmap = (request ctxt)#getParameterMap();
    res = [:];
    forJavaMap jmap do k v:
        res.[string k] := map string (wrapArray (v unsafely_as ~String[]))
    done;
    res);

isAjax ctxt = 
    (request ctxt)#getHeader("X-Requested-With") == "XMLHttpRequest";

escape text =
    (escapeT s =
         "&\(Character#codePointAt(s.[0] is string, 0));";
     strJoin '' (matchAll '[<>&"]' escapeT id "\(text)"));

//"     
    
redirectView path ctx = 
   ((response ctx)#sendRedirect(path);
    Completed "");


forwardView path ctx = 
   (req = request ctx;
    (req#getRequestDispatcher(path))#forward(req,response ctx);
    Completed "");

statusView status ctx = 
   ((response ctx)#setStatus(status);
    Completed "");

errorView errorCode ctx = 
   ((response ctx)#sendError(errorCode);
    Completed "");

responseWriter ctx = 
   (resW = (response ctx)#getWriter();
    {
        escaped st = resW#print(escape st),
        unescaped st = resW#print(st)
    });

contentType cT ctx = (
    c = if strEnds? cT ';utf-8' then cT else cT ^ ";utf-8" fi;
    (response ctx)#setContentType(c);
    responseWriter ctx;
);

writeView contentTypeStr text ctxt =
	((contentType contentTypeStr ctxt).unescaped text;
	 Completed "");

writeJSON struct ctxt =
   (json = load org.yeb.json;
	writeView "text/json" (json.writeJSON [] struct) ctxt); 

headers hs ctx = 
   (res = response ctx;
    forHash hs do k v:
        res#setHeader(k,v);
    done;
    ());

cacheForSeconds seconds mustRevalidate ctx = (
    res = response ctx;
    if seconds > 0 then
        //HTTP1.0 header
        res#setDateHeader("Expires", System#currentTimeMillis() + (seconds * 1000));
        //HTTP1.1 header
        hv = "max-age=\(seconds)\(if mustRevalidate then ", must revalidate" else ""fi)";
        res#setHeader("Cache-Control",hv);
    else
        res#setHeader("Pragma","no-cache");
        res#setDateHeader("Expires",1);
        res#setHeader("Cache-Control","no-cache");
        res#setHeader("Cache-Control","no-store");
    fi;
);


htmlViewHelper () = {
    headers = array [],
    keywords = array [],
    addU arr text = (
        if ((strLength text) > 0) and (not (contains text arr)) then push arr text fi;
        text
    ),
    addKeyword kw = addU keywords kw,
    addUniqueHeader hd = addU headers hd,
    addHeader hd =( push headers hd; hd),

    styleLink url media =
        '<link rel="stylesheet" type="text/css" ' ^ (if (strLength media) < 1 then "" else 'media="'^media^'"' fi) ^ 'href="'^url^'"/>',

    scriptLink url =
        '<script type="text/javascript" src="'^url^'"></script>',

    script src =
        '<script type="text/javascript">'^src^'</script>',

    style styles =
        ('<style type="text/css">/*<![CDATA[*/"'^styles^'/*]]>*/</style>'),


    ifIE ieMarker content =
        ('<!--[if '^ieMarker^']>'^content^'<![endif]-->'),
    ifIE7 content = ifIE 'lt IE 7' content,

    contentType ctt = (
        ct = if strEnds? ctt ';utf-8' then ctt else ctt ^ ";utf-8" fi;
        '<meta http-equiv="Content-Type" content="' ^ ct ^ '"/>';),
    title ti =
        '<title>'^escape(ti)^'<title>',
    shortcut sc =
        '<link rel="shortcut icon" href="'^sc^'"/>',
    writeKeywords kws =
        '<meta name="keywords" content="'^ (strJoin ", " kws)^'"/>',
    xhtmlDocType=
        '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
        
    escape
};

//+++++++++++++++++++++++Utils ++++++++++++++++++++++++++++


urlEncode str = URLEncoder#encode(str,"UTF-8");
urlDecode str = URLDecoder#decode(str,"UTF-8");

url strList = (
    if empty? strList then
        ""
    else
        strb = new java.lang.StringBuilder();
        var hasQuestion = false;
        var isName = false;
        var isFirstName = false;
        for strList do str:
            if (not hasQuestion) then
                cut = strIndexOf str "?" 0;
                if cut == ((strLength str )- 1) then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    hasQuestion := true;
                    isName := true;
                    isFirstName := true;
                elif cut == 0 then
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                elif cut > 0 then
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);
                    if not (strEnds? str "=") then
                        strb#append("=");
                    fi;
                    hasQuestion := true;
                    isName := false;
                else
                    if strb#length() > 0 then
                        strb#append("/")
                    fi;
                    strb#append(str);();
                fi
            else
                if isName then
                    if not isFirstName then strb#append("&"); fi;
                    strb#append(str);
                    strb#append("=");
                    isName := false;
                else
                    r = urlEncode str;
                    strb#append(r);
                    isName := true;
                fi
           fi
       done;
       strb#toString();
   fi;
);

urlParam str name value = (
    hasQuestion = (strIndexOf str "?" 0) > -1;
    strb = new java.lang.StringBuilder(str);
    if hasQuestion then
        strb#append("&");
    else
        strb#append("?");
    fi;
    strb#append(name)#append("=")#append(urlEncode value);
    string strb;
);


ptag name params content is string -> hash<string,string> -> list<string> -> string = (
    var strb = new java.lang.StringBuilder();
    strb := strb#append("<")#append(escape name);
    forHash params do k v:
        strb := strb#append(" ")#append(escape k)#append('="')#append(escape v)#append('"');
    done;
    if empty? content then
        strb := strb#append("/>");
    else
        strb := strb#append(">")#append(strJoin "\n" content)#append("</")#append(name)#append(">");
    fi;
    strb#toString();
);
    

{

    HEADER_PRAGMA = "Pragma",
    HEADER_EXPIRES = "Expires",
    HEADER_CACHE_CONTROL = "Cache-Control",
	
	notHandled,

    redirectView, 
    forwardView,
    statusView, 
    errorView, 
	writeView,
	writeJSON,

    contentType, 
    headers, 
    responseWriter, 
    htmlViewHelper,

    cacheForSeconds,

    urlEncode,
    urlDecode, 
    url,
    urlParam,

    escape,
    (@) text = escape text,

    ptag,

    request,
    response,
    asyncContext,
    servletContext,
    locale,
    session ctxt = ((request ctxt)#getSession(true)) is ~HttpSession,
    maybeSession ctxt = 
        maybeDefined None Some 
                    ((request ctxt)#getSession(false) is ~HttpSession),

    params, 
    param, 
    maybeParam, 
    allParams,
    isAjax,

    newCookie opts name value  =
        (cookie = new Cookie(name is string,value is string);
         for opts do opt: case opt of
            Comment c: cookie#setComment(c is string);
            Domain d: cookie#setDomain(d is string);
            MaxAge n: cookie#setMaxAge(n is number);
            Path p: cookie#setPath(p is string);
            Secure s: cookie#setSecure(s is boolean);
            Version v: cookie#setVersion(v is number);
         esac done;
         cookie),
    
    
    addCookie cookie ctxt = ESAPI#httpUtilities()#addCookie(response ctxt, cookie),

    setCookie opts name value ctxt = addCookie (newCookie opts name value) ctxt, 

    maybeCookie nofn somefn name ctxt = 
       (cs = (request ctxt)#getCookies();
        if not defined? cs then
            nofn()
        else
            ar = wrapArray cs;
            if empty? ar then
                nofn();
            else
                somefn (head ar);
            fi
        fi),
    
    addHeader name value ctxt = ESAPI#httpUtilities()#addHeader(response ctxt, name is string, value is string),
    assertSecureChannel ctxt = ESAPI#httpUtilities()#assertSecureChannel(request ctxt),
    changeSessionIdentifier ctxt = ESAPI#httpUtilities()#changeSessionIdentifier(request ctxt),
    decryptHiddenField encrypted = string (ESAPI#httpUtilities()#decryptHiddenField(encrypted is string)),
    decryptQueryString encrypted = 
       (ret = [:];
        forJavaMap (ESAPI#httpUtilities()#decryptQueryString(encrypted)) do k v:
              ret.[string k] := string v;
        done;
        ret),
    decryptStateFromCookie ctxt =
       (ret = [:];
        forJavaMap (ESAPI#httpUtilities()#decryptStateFromCookie(request ctxt)) 
        do k v:
              ret.[string k] := string v;
        done;
        ret),
    encryptHiddenField value = 
        string (ESAPI#httpUtilities()#encryptHiddenField(value is string)),
    encryptQueryString value = 
        string (ESAPI#httpUtilities()#encryptQueryString(value is string)),
    encryptStateInCookie values ctxt =
        ESAPI#httpUtilities()
            #encryptStateInCookie(response ctxt, values is hash<string,string>),

    getCookie name ctxt = (
        str = ESAPI#httpUtilities()#getCookie(request ctxt,name);
        if defined? str then Some (string str) else none fi),

    getFileUploads destDir extensions ctxt =
        mapJavaList do fl: (fl unsafely_as ~java.io.File) done
                ESAPI#httpUtilities()#getFileUploads(request ctxt, 
                        new java.io.File(destDir is string), 
                        extensions is list<string>),
    
    getHeader name ctxt =
        (str = ESAPI#httpUtilities()#getHeader(request ctxt,name is string);
        if defined? str then Some (string str) else none fi),

    killAllCookies ctxt = 
        ESAPI#httpUtilities()#killAllCookies(request ctxt,response ctxt),
    killCookie name ctxt = 
        ESAPI#httpUtilities()
            #killCookie(request ctxt,response ctxt,name is string),
    setHeader name value ctxt = 
        ESAPI#httpUtilities()
            #setHeader(response ctxt,name is string, value is string),
    setNoCacheHeaders ctxt = 
        ESAPI#httpUtilities()#setNoCacheHeaders(response ctxt),

    encodeForBase64 bytes wrap = 
        string ESAPI#encoder()
            #encodeForBase64(bytes is ~byte[],wrap is boolean),
    decodeFromBase64 str = 
        ESAPI#encoder()#decodeFromBase64(str is string),
    encodeForCSS str = 
        ESAPI#encoder()#encodeForCSS(str is string),
    encodeForHTML str = 
        ESAPI#encoder()#encodeForHTML(str is string),
    encodeForHTMAttribute str = 
        ESAPI#encoder()#encodeForHTMLAttribute(str is string),
    encodeForURL str = 
        ESAPI#encoder()#encodeForURL(str is string),
    encodeForXML str = 
        ESAPI#encoder()#encodeForXML(str is string)
}