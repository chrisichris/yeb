/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.filter;

import javax.servlet: ServletContext, Filter, FilterConfig, FilterChain, ServletRequest, ServletResponse, ServletException;
import javax.servlet.http: HttpServletRequest, HttpServletResponse;
import yeti.lang: Fun, Struct;
import java.util.concurrent.ConcurrentHashMap;
import java.io.File;

import java.lang: Thread, System,ClassLoader,ClassNotFoundException;
import org.yeb: YetiClassLoader;
import org.yeb.YebUtils;

load org.yeb.std;

//compile = load yeti.lang.compiler.yeb;

log = getLogger "org.yeb.filter";

mvc = load org.yeb.mvc.handler;
configModule = load org.yeb.mvc.config;
forkjoin = load org.yeb.forkjoin;


//helper to invoke with classloader

typedef ctxtType = {req is ~HttpServletRequest, res is ~HttpServletResponse, sctxt is ~ServletContext};

typedef handlerResult = Completed string | NotHandled string | Handling string;

typedef handlerType = ctxtType -> handlerResult;


typedef mainWebModuleType = {   destroy is () -> (),
                                handler is handlerType,
                            };
typedef mainModuleType = { destroy is () -> ()}



withClassLoader cl f is ~ClassLoader -> (() -> 'a) -> 'a= (
    oldCl = Thread#currentThread()#getContextClassLoader();
    try
        Thread#currentThread()#setContextClassLoader(cl);
        f ();
    finally
        Thread#currentThread()#setContextClassLoader(oldCl);
    yrt;
);

printError exIn srcs resp =
   (import java.lang:Throwable, StackTraceElement;
    import yeti.lang.compiler.CompileException;

    wr = (resp is ~HttpServletResponse)#getWriter();
    wr#print("<html><head></head><body>");
        
    if (exIn is ~Exception) instanceof CompileException then
        wr#print("<h2>Error compiling code:</h2>");
        msg = exIn#getMessage();
        matched = like '([^:]+):(\d+):(\d+):(.*)' msg ();
        if not empty? matched then
            sourceFile = matched.[1];
            lineNumber = number matched.[2];
            
            wr#print("<h4>\(sourceFile) at line: \(lineNumber) column: \(matched.[3])</h3>");
            wr#print("<p>\(matched.[4])</p>");
            case findCodeAtLine srcs sourceFile lineNumber 4 of
            None _ : ();
            Some {fileName, lines, lineNumber, fromLineNumber, toLineNumber}:
               (wr#print('<pre class="codelines">');
                var i = fromLineNumber;
                for lines do line:
                    wr#print("\(i): \(line)\n");
                    i := i +1; 
                done;
                wr#print('</pre>'));
            esac;
        else
            wr#print("<p>\(mvc.escape msg)</p>");
        fi;
    else
        wr#print("<h2>Exception happend</h2>");
        exStack = 
            (rf ex1 exls = if nullptr? (ex1 is ~Throwable) then 
                        exls 
                    else 
                        rf ex1#getCause() (ex1 :: exls) 
                    fi;
            reverse (rf exIn []));
        for exStack do ex1:
            wr#print("<h4>\(ex1):</h4><ul>");
            for ex1#getStackTrace() do ste:
                wr#print("<li>\(string ste)");
                case findCodeAtLine srcs ste#getFileName() ste#getLineNumber() 4 of
                None _ : ();
                Some {fileName, lines, lineNumber, fromLineNumber, toLineNumber}:
                   (wr#print('<pre class="codelines">');
                    var i = fromLineNumber;
                    for lines do line:
                        wr#print("\(i): \( line) \n");
                        i := i +1; 
                    done;
                    wr#print('</pre>'));
                esac;
                wr#print("</li>");
            done
        done
    fi;
    wr#print("</body></html>");
    wr#flush();
    wr#close());


// printError ex srcs resp =
    // (wr = (resp is ~HttpServletResponse)#getWriter();
    // wr#print("<html><head></head><body><h1>Exception: </h1>");
    // import java.io: PrintWriter, StringWriter;
    // strW = new StringWriter();
    // (ex is ~Exception)#printStackTrace(new PrintWriter(strW,true));
    // str = mvc.escape (string strW);
    // wr#print(str);
    // wr#print("</body></html>");
    // );



class YebFilter extends javax.servlet.Filter

    unhandledPathes = array ["static/", "css/", "js/", "img/","favicon.ico"],

    var mainModuleName = "yebMain",
    var mainWebModuleName = "yebWebMain",
    var yebWebSrcDir = "yebwebsrc",

    var fileWatcher = () unsafely_as ~java.nio.file.WatchService,
    
    var dynamicReload = true,
    
    pathHelper = new org.springframework.web.util.UrlPathHelper(),

    loadMutex = new Object(),
    var filterConfig = () as ~FilterConfig,
    var servletContext = () as ~ServletContext,

    var mainModule is mainModuleType = {
        destroy _ = ()
        },

    var mainWebModule is mainWebModuleType = { init _ = (), destroy _ = (), handler = \mvc.notHandled},
    var mainWebModuleModified = -1,
    var mainWebHandler is handlerType = \mvc.notHandled,
    var mainWebModuleClassLoader = () as ~ClassLoader,


    loadWebModule cl is ~ClassLoader -> 'a = 
       (
        oldCl = mainWebModuleClassLoader;
        mainWebModuleClassLoader := cl;

        withClassLoader oldCl mainWebModule.destroy;
        log#debug("yebWebMain module destroyed");


        withClassLoader cl \(
            try
				_ = cl#loadClass(mainWebModuleName);
			catch ClassNotFoundException ex:
				s = ("Could not load yebWebMain. Please make sure that [\(mainWebModuleName)] is in directory [\(yebWebSrcDir)]");
				log#error(s);
				throw ex;
			yrt;
			
			try
				mainWebModule := (YebUtils#moduleLoad(cl, mainWebModuleName)) unsafely_as mainWebModuleType;
                log#debug("initialized yebWebMain module [\(mainWebModuleName)] with classLoader [\(cl)]");
			catch ClassNotFoundException ex:
				throw ex;
			yrt;
			mainWebHandler := mainWebModule.handler;
        );
    ),



    void init(FilterConfig fc)
        filterConfig := fc;
        configModule.filterConfig := fc;
        servletContext := fc#getServletContext();
        
        if defined? fc#getInitParameter("unhandledPathes") then
            pa = strSplit "," (string fc#getInitParameter("unhandledPathes"))
                |> map strTrim;
            for pa (push unhandledPathes);
        fi;
            
        
        if defined? fc#getInitParameter("yebMainModule") then
            mainModuleName := strTrim (string fc#getInitParameter("yebMainModule"));
        fi;

        if defined? fc#getInitParameter("yebWebModule") then
            mainWebModuleName := strTrim (string fc#getInitParameter("yebWebModule"));
        fi;
        
        if defined? fc#getInitParameter("yebWebSrcDir") then
            yebWebSrcDir := strTrim (string fc#getInitParameter("yebWebSrcDir"));
        fi;

        //the file Watcher
            
        
        
        mainWebModuleClassLoader := Thread#currentThread()#getContextClassLoader();

        //load the mainmodule form the standard classpaht
        hasMainModule = try 
            _ = Thread#currentThread()#getContextClassLoader()#loadClass(mainModuleName); 
            mainModule := YebUtils#moduleLoad(Thread#currentThread()#getContextClassLoader(), mainModuleName) 
                unsafely_as mainModuleType;
            log#debug("yebMain module [\(mainModuleName)] initialized");
            true
        catch ClassNotFoundException: 
            log#debug("No yebMain module [\(mainModuleName)] found");
            false
        yrt;
        
        //load the webmodule if not development
        dynamicReload := (configModule.webDynamicReload?) and (strLength yebWebSrcDir > 0);
        if dynamicReload then
            import java.nio.file:FileSystems, 
                                StandardWatchEventKinds;
            
            fileWatcher := FileSystems#getDefault()#newWatchService();

            registerDirs file is ~File -> () = 
                if file#isDirectory() then
                    _ = file#toPath()#register(fileWatcher, 
                                     [StandardWatchEventKinds#ENTRY_CREATE,
                                      StandardWatchEventKinds#ENTRY_DELETE,
                                      StandardWatchEventKinds#ENTRY_MODIFY]);
                   for (array file#listFiles()) registerDirs;
                fi;
            registerDirs new File(yebWebSrcDir);
            
            //load the initial
            ycl = new YetiClassLoader(Thread#currentThread()#getContextClassLoader(), 
                array [string yebWebSrcDir], false);
            loadWebModule ycl;
        else
            log#info("auto web realoding is off");
            ycl = if (new File(string yebWebSrcDir)#exists()) then
                    log#debug("Loading module from yebWebSrcDir \(yebWebSrcDir)"); 
                    new YetiClassLoader(Thread#currentThread()#getContextClassLoader(), 
                        array [string yebWebSrcDir], false);
                  else
                    Thread#currentThread()#getContextClassLoader()
                  fi;
            loadWebModule ycl
        fi;
        log#info("YebFilter started \(if hasMainModule then "with mainModule [\(mainModuleName)] " else " without mainModule " fi), dynamicReload: \(dynamicReload)"),


    void destroy()
        withClassLoader mainWebModuleClassLoader mainWebModule.destroy;
        mainModule.destroy ();
        log#info("YebFilter was shutdown"),

    void doFilter(ServletRequest sreq, ServletResponse sres, FilterChain filterChain)
        if (sreq instanceof HttpServletRequest) and (sres instanceof HttpServletResponse) then
            req = sreq unsafely_as ~HttpServletRequest;
            res = sres unsafely_as ~HttpServletResponse;
			if not nullptr? req#getAttribute("org.yeb.UnhandledDispatch") then
                log#debug("Dispatched path");
                filterChain#doFilter(req,res);
            else 
                pathInfo = (
                    p = pathHelper#getPathWithinApplication(req);
                    if strStarts? p "/" then strRight p 1 else p fi
                );
            
                if any do n:strStarts? pathInfo n done unhandledPathes then
                    log#debug("Not handling {}",pathInfo);
                    filterChain#doFilter(req,res);				
                else
                    try 
                        var cl = mainWebModuleClassLoader;
                        var handler = mainWebHandler;
                        if dynamicReload then
                            //relaod the mainmodule if necessery (this method checks for last modified
                            
                            synchronized loadMutex \(
                                var watchKey = fileWatcher#poll(); 
                                println "dynamic reload \(watchKey)";
                                if defined? watchKey then
                                    log#debug("Code was modified. Reloading yeti-code in directory: \(yebWebSrcDir)");
                                    _ = watchKey#pollEvents();
                                    _ = watchKey#reset();
                                    
                                    //remove all keys until null
                                    /*
                                    (defined? watchKey) loop 
                                        (watchKey := fileWatcher#poll();
                                         _ = watchKey#reset()
                                         );
                                    */ 
                                    ycl = new YetiClassLoader(Thread#currentThread()#getContextClassLoader(), 
                                        array [string yebWebSrcDir], false);
                                    loadWebModule ycl;
                                    cl := mainWebModuleClassLoader;
                                    handler := mainWebHandler;
                                fi);
                        fi;


                        //invoke the mainhandler here but with the main class loader
                        //lookup the subhandlers
                        log#debug("starting async context");

                        asyncContext = req#startAsync(req,res);
                        ctxt = mvc.rootCtxt pathInfo servletContext req res asyncContext;
                        
                        _ = withMonitor ctxt.monitor \(
                            forkjoin.execute (forkjoin.recursiveTask \(withClassLoader cl do:
                                log#debug("handling path [{}]",pathInfo);
                                r = try
                                    handler ctxt;
                                catch Exception ex:
                                    ctxt.monitor.fire();
                                    if dynamicReload then
                                        printError ex [yebWebSrcDir] res;
                                        //{status = 500};
                                        throw ex;
                                    else
                                        throw ex;
                                    fi;
                                yrt;
                                ();
                                case r of
                                    NotHandled x: 
                                       (log#debug("could not handle path [{}]: daspatching",pathInfo);
                                        req#setAttribute("org.yeb.UnhandledDispatch", "dispatch");
                                        asyncContext#dispatch());
                                    Completed x:
                                       (res#getWriter()#close();
                                        asyncContext#complete();
                                        log#debug("completed context path: {}",pathInfo));
                                    Handling x:
                                        log#debug("handling context path: {}", pathInfo);
                                esac;
                                
                            done)));
                        ()
                    catch Exception ex:
                        if dynamicReload then
                            printError ex [yebWebSrcDir] res;
                            //{status = 500};
                            throw ex;
                        else
                            throw ex;
                        fi;
                    yrt    
                        
                fi;
            fi
        else
            filterChain#doFilter(sreq,sres)
        fi;
   

end;

1