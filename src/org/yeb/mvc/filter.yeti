/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.filter;

import javax.servlet: ServletContext, Filter, FilterConfig, FilterChain, ServletRequest, ServletResponse, ServletException;
import javax.servlet.http: HttpServletRequest, HttpServletResponse;
import yeti.lang: Fun, Struct;
import java.util.concurrent.ConcurrentHashMap;
import java.io.File;
import java.lang: Thread, System,ClassLoader,ClassNotFoundException;
import org.yeticl: YetiClassLoader;
import org.yeb.YebUtils;

load org.yeb.std;

//compile = load yeti.lang.compiler.yeb;

log = getLogger "org.yeb.filter";

mvc = load org.yeb.mvc.handler;
configModule = load org.yeb.mvc.config;


//helper to invoke with classloader
typedef resultType = {status is number};

typedef ctxtType = {req is ~HttpServletRequest, res is ~HttpServletResponse, sctxt is ~ServletContext};
typedef handlerType = ctxtType -> resultType;


typedef mainWebModuleType = {   init is ~FilterConfig -> (),
                                destroy is () -> (),
                                handler is handlerType,
                            };
typedef mainModuleType = { init is ~FilterConfig -> (), destroy is () -> ()}


findLastModifiedFile lastModified file is number -> ~File -> number = (
   lm = file#lastModified();
   if lm > lastModified then
     lm
   else
     if file#isDirectory() then
       fold findLastModifiedFile lastModified (array file#listFiles());
     else
       lastModified
     fi
   fi
);

withClassLoader cl f is ~ClassLoader -> (() -> 'a) -> 'a= (
    oldCl = Thread#currentThread()#getContextClassLoader();
    try
        Thread#currentThread()#setContextClassLoader(cl);
        f ();
    finally
        Thread#currentThread()#setContextClassLoader(oldCl);
    yrt;
);

printError ex srcs resp =
    (//stacks = findCodeForException 5 srcs ex;
    wr = (resp is ~HttpServletResponse)#getWriter();
    wr#print("<html><head></head><body><h1>Exception: </h1>");
    // printCode {ex, codeLines} = (
        // wr#print("<h2>caused by Exception: \(ex)</h2>");
        // if not empty? codeLines then
            // {fileName,lines,lineNumber, fromLineNumber,toLineNumber} = head codeLines;
            // wr#print("<h4>in source-file [\(fileName)] at line [\(lineNumber)]</h4>:");
            // var i = fromLineNumber;
            // for lines do line:
                    // wr#print("\(i): \(line)<br>");
                    // i := i +1; done;
        // fi);
    //for stacks printCode;    
    (ex is ~Exception)#printStackTrace(wr));




class YebFilter extends javax.servlet.Filter

    var yebWebDir = "yebwebsrc",

    pathHelper = new org.springframework.web.util.UrlPathHelper(),

    loadMutex = new Object(),
    var filterConfig = () as ~FilterConfig,
    var servletContext = () as ~ServletContext,

    var mainModule is mainModuleType= {init _ = (), destroy _ = ()},
    var mainModuleClassLoader = () as ~ClassLoader,

    var mainWebModule is mainWebModuleType = { init _ = (), destroy _ = (), handler = \(mvc.goonResult)},
    var mainWebModuleModified = -1,
    var mainWebHandler is handlerType = \(mvc.goonResult),
    var mainWebModuleClassLoader = () as ~ClassLoader,


    loadWebModule cl is ~ClassLoader -> 'a = (
        oldCl = mainWebModuleClassLoader;
        mainWebModuleClassLoader := cl;

        withClassLoader oldCl mainWebModule.destroy;
        log#info("yebWebMain module destroyed");


        withClassLoader mainWebModuleClassLoader \(
            log#info("loading yebWebMain module with classLoader \(cl)");
            mainWebModule := (YebUtils#moduleLoad(cl, "yebWebMain")) unsafely_as mainWebModuleType;
            mainWebModule.init filterConfig;
            log#info("new yebWebMain module initialized");
            mainWebHandler := mainWebModule.handler;
        );
    ),

    loadWebModuleFromSource _ =
        synchronized loadMutex \(
            //check the last modified.
            nmf = findLastModifiedFile mainWebModuleModified (new File(yebWebDir));
            if nmf > mainWebModuleModified then
                mainWebModuleModified := nmf;
                log#debug("Reloading yeti-code in directory: \(yebWebDir)");
                ycl = new YetiClassLoader(mainModuleClassLoader, array [string yebWebDir], false);
                loadWebModule ycl
            fi),


    void init(FilterConfig fc)
        filterConfig := fc;
        servletContext := fc#getServletContext();

        if defined? fc#getInitParameter("yebWebDir") then
            yebWebDir := strTrim (string fc#getInitParameter("yebWebDir"));
        fi;

        mainModuleClassLoader := Thread#currentThread()#getContextClassLoader();

        mainWebModuleClassLoader := mainModuleClassLoader;

        withClassLoader mainModuleClassLoader \(
            mcl = try _ = mainModuleClassLoader#loadClass("yebMain"); Some mainModuleClassLoader catch ClassNotFoundException: none yrt;
            case mcl of
                None _: log#info("No yebMain module - starting without");
                Some cL:
                    (mmod = (YebUtils#moduleLoad(cL, "yebMain")) unsafely_as mainModuleType;
                    log#info("Initializing yebMain module");
                    mmod.init (filterConfig is ~FilterConfig);
                    mainModule := mmod);
             esac;
        );

        if (not configModule.webDynamicReload?) or (strLength yebWebDir == 0) then
            loadWebModule mainModuleClassLoader;
        else
            loadWebModuleFromSource ();
        fi,


    void destroy()
        withClassLoader mainWebModuleClassLoader mainWebModule.destroy;
        log#info("yebWebMain destroyed");
        withClassLoader mainModuleClassLoader mainModule.destroy;
        log#info("yebMain destroyed"),

    void doFilter(ServletRequest sreq, ServletResponse sres, FilterChain filterChain)
        if (sreq instanceof HttpServletRequest) and (sres instanceof HttpServletResponse) then
            req = sreq unsafely_as ~HttpServletRequest;
            res = sres unsafely_as ~HttpServletResponse;

            development = (configModule.webDynamicReload?) and (strLength yebWebDir > 0);
            if development then
                //relaod the mainmodule if necessery (this method checks for last modified
                loadWebModuleFromSource ();
            fi;

            var cl = mainWebModuleClassLoader;
            var handler = mainWebHandler;
            if development then
                synchronized loadMutex \(
                    cl := mainWebModuleClassLoader;
                    handler := mainWebHandler;
                );
            fi;

            //invoke the mainhandler here but with the main class loader
            //lookup the subhandlers
            status = withClassLoader mainWebModuleClassLoader \(

                pathInfo = (
                    p = pathHelper#getPathWithinApplication(req);
                    if strStarts? p "/" then strRight p 1 else p fi
                );
                ctxt = mvc.rootCtxt pathInfo servletContext req res;

                log#debug("handling context for path: {}",pathInfo);
                r = try
                    handler ctxt;
                catch Exception ex:
                    if development then
                        printError ex ["src",yebWebDir] res;
                        //{status = 500};
                        throw ex;
                    else
                        throw ex;
                    fi;
                yrt;
                log#debug("handled context with status: {} for path: {}",r.status,pathInfo);
                r.status
            );
            //depending on the result do further filter or skip
            if status < 0 then
                filterChain#doFilter(req,res);
            else () fi;
        else
            filterChain#doFilter(sreq,sres)
        fi;
   

end;

1