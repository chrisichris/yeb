/// put module documentation here


module org.yeb.mvc.authentication;

import javax.servlet.http:HttpSession;
import org.owasp.esapi:ESAPI;

load org.yeb.std;
load org.yeb.mvc.webutils;

typedef principal ={
    name is string,
    email is string,
    roles is list<string>,
    loggedInBy is string,
    locked is boolean
}

var anonymousUser = {
    name = "anonymouse",
    email ="anonymouse@anonymouse.com",
    roles =[],
    locked = true,
    loggedInBy = "anonymous"};

_currentUser = threadLocal anonymousUser;
getCurrentUser () = _currentUser.value;

clearUser () = _currentUser.value := anonymousUser;

withUser user fn = withThreadLocal _currentUser user fn;

userSessionKey = "org.yeb.mvc.authentication.user";

storeInSession user req  =
    if user == anonymousUser then
        delete req.res.session userSessionKey;
    else
        req.res.session.[userSessionKey] := (user as ~Object);
    fi;

sessionAuthenticator nextAuthenticator req =
        if not userSessionKey in req.res.session then
            nextAuthenticator req
        else
            (req.res.session.[userSessionKey] is ~Object) 
                unsafely_as principal
        fi;


var rememberMeCookieName = "yeb-mec";

storeRememberMe user password maxAge opts ctxt =
    (killCookie rememberMeCookieName ctxt;

    if user != anonymousUser then
        clearToken = "\(user.name is string)|\(password is string)";
        expiry = ESAPI#encryptor()#getRelativeTimeStamp(maxAge * 1000);
        cryptToken = string (ESAPI#encryptor()#seal(clearToken, expiry));
        setCookie (cookie [Maxage maxAge] rememberMeCookieName cryptToken)
                  ctxt;
    fi);

rememberMeAuthenticator userService nextAuthenticator ctxt =
    (cs = getCookies rememberMeCookieName ctxt;
    if empty? cs then
        nextAuthenticator ctxt
    else
        token = (head cs).value;
        try
            data = strSplit '\|' (ESAPI#encryptor()#unseal(token is string));
            if length data != 2 then
                killCookie rememberMeCookieName ctxt;
                failWith ("not handled");
            else
                username = data.[0];
                password = data.[1];
                u = userService username password;
                if u == anonymousUser then
                    killCookie rememberMeCookieName ctxt;
                    failWith ("not handled");
                else 
                    Some (u with {loggedInBy = "cookie"});
                fi;
            fi
        catch Exception ex:
            killCookie rememberMeCookieName ctxt;
            nextAuthenticator ctxt;
        yrt;
    fi);


formAuthenticator loginHandler nextAuthenticator ctxt =
        ctxt |> maybeParam "login_form" \(nextAuthenticator ctxt) do value:
                if value == "true" then
                    loginHandler ctxt
                else
                    nextAuthenticator ctxt;
                fi;
            done;

basicInitPage realm req =
    (res = writeHtml req 
    """<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML>
  <HEAD>
    <TITLE>Error</TITLE>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
  </HEAD>
  <BODY><H1>401 Unauthorized.</H1></BODY>
</HTML>""";
    res.statusCode := 401;
    res.headers.["WWW-Authenticate"]:= ["Basic realm=\"\(realm)\""];
    req.respond res;
    true);

basicAuthenticator userService opts nextAuthenticator req =
    (var credentialsCharSet = "UTF-8";
    var send401IfNotValid = false;
    for opts do o: case o of
        CharSet x: credentialsCharSet := x;
        S401 v : send401IfNotValid := v;
    esac done;

    if not empty? (headers "Authorization" req) 
        and strStarts? (head (headers "Authorization" req)) "Basic" then
        header = head (headers "Authorization" req);
        decoded = string (new String(decodeFromBase64 (strRight header 6),
                    credentialsCharSet));
        delim = strIndexOf decoded ':' 0;
        if delim != -1 then
            username = strLeft decoded delim;
            pwd = strRight decoded (delim + 1);
            u = userService username pwd;
            if u == anonymousUser then
                if send401IfNotValid then None (basicInitPage req)
                else nextAuthenticator req fi;
            else
                Some (u with {loggedInBy = "basicAuthentictation"})
            fi;
        else
                if send401IfNotValid then None (basicInitPage req)
                else nextAuthenticator req fi;
        fi
    else nextAuthenticator req fi);


anonymousAuthenticator ctxt = anonymousUser;



logoutFunctions = array [
            storeInSession anonymousUser, 
            storeRememberMe  
            anonymousUser "" 2000 []];

logout ctxt = (clearUser(); for logoutFunctions do fn: fn ctxt done);

accessDenied msg = throw new AccessDeniedException(msg);

isAccessibleByUser role user = contains? role user.roles;
isAccessible role = isAccessibleByUser role (_currentUser.value);
checkAccess role =
    if not isAccessible role then
        accessDenied "not suitable for role";
    else () fi;


securityHandlerAdapter authenticator 
                      loginPageHandler 
                      restrictedPageHandler 
                      handler 
                      ctxt =
    case authenticator ctxt of
        None {result}: {result is number};
        Some user: withUser user
            \try
                handler ctxt;
            catch AccessDeniedException ex:
                if _currentUser.value == anonymousUser then
                    loginPageHandler ctxt;
                else
                    restrictedPageHandler ctxt;
                fi;
            yrt;
     esac;


{
anonymousUser,

clearUser, 
withUser, 
storeInSession, 
getCurrentUser,
sessionAuthenticator, 
storeRememberMe, 
rememberMeCookieName,
rememberMeAuthenticator, 
formAuthenticator, 
basicInitPage, 
basicAuthenticator,
anonymousAuthenticator, 
logoutFunctions, 
logout, 
accessDenied, 
isAccessibleByUser,
isAccessible, 
checkAccess, 
securityHandlerAdapter
}
