/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.handler;



import java.lang: Thread, System, 
				  ClassLoader, Character, CharSequence,
				  Runnable;
import java.util: Locale, Date, Collection;
import java.util.regex:Pattern;
import java.util.concurrent.ConcurrentHashMap;
import java.text:NumberFormat, DecimalFormat, DateFormat, SimpleDateFormat;
import java.net: URLEncoder, URLDecoder;
import java.io:File;

import javax.servlet: ServletContext, FilterChain,ServletException,
                      AsyncContext, ServletRequest, AsyncListener;
import javax.servlet: Filter,FilterConfig,ServletRequest,ServletResponse,
					  DispatcherType;
import javax.servlet.http: HttpServletRequest, HttpServletResponse,HttpSession,
							Part;

import org.springframework.mock.web: MockFilterConfig, MockServletContext, 
    MockHttpServletRequest, MockHttpServletResponse,MockFilterChain;
import org.springframework.web.util.WebUtils;

import yeti.lang: Fun, Struct;
import org.yeb:ValidationException, YebUtils;

load org.yeb.std;
load org.yeb.mvc.webutils;
load org.yeb.validation;


typedef handlerType<a> = a -> boolean;
typedef handlerAdapterType<a> = handlerType<a> -> handlerType<a>;






makeNewCtxt sctxt asyncContext =
    {sctxt is ~ServletContext,
     asyncContext is ~AsyncContext};

     
asyncCtxt ctxt =
   (requ = request ctxt;
    asyncCtxt = if not requ#isAsyncSupported() then
        failWith "asynch is not supported on this request"
    elif requ#isAsyncStarted() then
        requ#getAsyncContext()
    else
        requ#startAsync(requ, response ctxt);
    fi;
        
    ctxt with {
        sctxt is ~ServletContext = ctxt.sctxt,
        get req () = 
            asyncCtxt#getRequest() unsafely_as ~HttpServletRequest,
        get res () = 
            asyncCtxt#getResponse() unsafely_as ~HttpServletResponse,
        actxt is ~AsyncContext = asyncCtxt,
        complete () = asyncCtxt#complete()
    });
     
asyncListener fn =
   (import javax.servlet:AsyncListener, AsyncEvent;
    class TAsyncListener extends AsyncListener
        void onComplete(AsyncEvent ev)
            fn (OnComplete ev),
        void onError(AsyncEvent ev)
            fn (OnError ev),
        void onStartAsync(AsyncEvent ev)
            fn (OnStartAsync ev),
        void onTimeout(AsyncEvent ev)
            fn (OnTimeout ev)
    end;
    new TAsyncListener());
    
         
     


flashKey = "org.yeb.session.flash";

flashGetStruct ctx =
   (ra = (request ctx)#getAttribute(flashKey);
    if not defined? ra then
        failWith "no FlashContext: flash acces must be wrapped in a flashHandler";
    else
        ra unsafely_as {var oldMap is hash<string,~Object>, 
                        var newMap is hash<string, ~Object>}
    fi);

flashGet ctx key is 'b -> string -> (None () | Some 'a) = (
    fc = flashGetStruct ctx;
    if key in fc.newMap then
        Some (fc.newMap.[key] unsafely_as 'a);
    elif key in fc.oldMap then
        Some (fc.oldMap.[key] unsafely_as 'a);
    else
        none
    fi);

flashPut ctx key value =
   (flashGetStruct ctx).newMap.[key] := (value unsafely_as ~Object);
    
flashGetAndKeep ctx key =
   (r = flashGet ctx key;
    case r of
        Some v: flashPut ctx key v;
        None _: ();
    esac;
    r);

rootCtxt pathInfo sctxt req res  = 
   (reqn = new YebHttpServletRequestWrapper(() as ~Locale, "",
                                        pathInfo,() as ~java.util.Map, req);
	async = reqn#startAsync(reqn, res);
    makeNewCtxt sctxt async);

class YebMockAsyncContext(ServletRequest req, ServletResponse res) extends AsyncContext
	
	var timeout = 1000,
	
	void addListener(AsyncListener lis)
		(),
	void addListener(AsyncListener lis, ServletRequest req, ServletResponse res)
		(),
	
	void complete() (),
	
	AsyncListener createListener(Class cl)
		failWith "Not supported",
	
	void dispatch() (),
	
	void dispatch(ServletContext ctxt, String path) (),
	void dispatch(String path) (),
	ServletRequest getRequest() req,
	ServletResponse getResponse() res,
	long getTimeout() timeout,
	void setTimeout(long t) timeout := t,
	boolean hasOriginalRequestAndResponse() true,
	void start(Runnable ra) failWith "Not supported"
end;

class YebMockHttpServletRequest(MockServletContext ctxt, String reqMethod, String reqPath, MockHttpServletResponse resp) extends MockHttpServletRequest(ctxt,reqMethod, reqPath)
	asyncContext = new YebMockAsyncContext((),resp),
	
	AsyncContext getAsyncContext() asyncContext,
	boolean isAsyncStarted() true,
	boolean isAsyncSupported() true,
	AsyncContext startAsync() asyncContext,
	AsyncContext startAsync(ServletRequest req, ServletResponse res)
		asyncContext,
	Collection getParts () failWith "Not implemented",
	Part getPart(String name) failWith "Not implemented",
	boolean authenticate(HttpServletResponse resp) failWith "Not implemented",
	void logout() (),
	DispatcherType getDispatcherType() failWith "Not implemented",
	void login(String name, String pwd) failWith "Not implemented"
	
	
end;
	

		

mockCtxt opts = 
   (var reqMethod = "GET";
    var reqPath = "/";
    var resourcePath = "test/resources/webapp";
    var headers = [:];
    var params = [:];
    for opts do opt:
        case opt of
        Get ruri : (reqMethod := "GET";reqPath := ruri);
        Head ruri : (reqMethod := "HEAD";reqPath := ruri);
        Post ruri : (reqMethod := "POST";reqPath := ruri);
        Put ruri : (reqMethod := "PUT";reqPath := ruri);
        Delete ruri : (reqMethod := "DELETE";reqPath := ruri);
        Trace ruri : (reqMethod := "TRACE";reqPath := ruri);
        Connect ruri : (reqMethod := "CONNET";reqPath := ruri);
        ResourcePath str: resourcePath := str;
        Header ha: forHash ha do k v: headers.[string k] := string v done;
        Param ha: forHash ha do k v: 
                params.[string k] := array [(string v) unsafely_as ~String] 
            done;
        Params ha : forHash ha do k v:
                params.[string k] := 
                    array (map do ve: 
                            (string ve) unsafely_as ~String 
                           done v)
            done;
        esac;
    done;


    mockServletCtxt = new MockServletContext(resourcePath);
    mockRes = new MockHttpServletResponse();
    mockReq = new YebMockHttpServletRequest(mockServletCtxt,reqMethod, reqPath,mockRes);

    forHash params do k v:
        mockReq#addParameter(k,v);
    done;
    forHash headers do k v:
        mockReq#addHeader(k,v);
    done;

    ctxt = rootCtxt reqPath mockServletCtxt mockReq mockRes;
	
	
    nc = ctxt with {
        mockServletCtxt,
        mockReq,
        mockRes,
    };
    nc;
);


//HandlerAdapters


idHandler handler is handlerAdapterType<'a> = handler;

urlPatternToRegex pat = 
   (//:a-z is name
    //:a-z? is optional
    //* at end means rest
    //$marks start regex $ marks end regex
    
    import java.util.regex.Pattern;
    
    paS = if strEnds? pat "/*" then 
                    strLeft pat (strLength pat - 2)
               else
                    pat;
               fi;
               
    tokens = matchAll '(/?\.?):(\w+)(\$([^\$]+)\$)?(\?)?' (Token . tail) Text paS;
    
    names = tokens 
        |> map do t:
            case t of
            Token [leading, name, foo, regex, mark]: Some name;
            _ : none;
            esac
        done
        |> catSome
        |> array;
    
    reg = tokens
    |> map do x:
        case x of
        Token [leading, name, foo, regex, mark]:
           (reg = if defined? regex and (strLength regex > 0) then 
                    regex;
                  else
                    '[^/\.]+'
                  fi;
            reg2 = "(?<\(name)>\(reg))";
            
            if defined? mark then
                if defined? leading then
                    "(?:\(Pattern#quote(leading))" ^ reg2 ^ ")?" ;
                else
                    reg2 ^ "?";
                fi;
            else
                if defined? leading then
                    Pattern#quote(leading) ^ reg2
                else
                    reg2;
                fi;
            fi);
        Text tx:
           (Pattern#quote(tx));
        _ : failWith "should not happen";
        esac
    done
    |> strJoin "";
    
    regex = if strEnds? pat "/*" then
        push names "rest";
        reg ^ '(?:/(?<rest>.*))?'
    else
        reg
    fi;
    
    {
        names = nub names,
        regex
    }
    );

    
regexHandler requestUrl handler = (
    var checkMethod? = true;    

    {fst = meth , snd = regexPattern} = case requestUrl of
        Get us: pair "GET" us;
        Post us: pair "POST" us;
        Put us: pair "PUT" us;
        Delete us: pair "DELETE" us;
        Options us: pair "OPTIONS" us;
        Head us: pair "HEAD" us;
        All us: 
            (checkMethod? := false;
            pair "ALL" us);
        esac;
    
    {names, regex} = urlPatternToRegex regexPattern;
    pattern = Pattern#compile(regex);

    do octxt:
        oreq = request octxt;
        if checkMethod? and (meth != (strUpper oreq#getMethod())) then
            false
        else
            matcher = pattern#matcher(oreq#getPathInfo() as ~java.lang.String);
            if matcher#matches() then
                nreq = new YebHttpServletRequestWrapper(true,oreq);

                //add the paramters
                urlParams = array [];
                for [0..matcher#groupCount()] do c:
                    push urlParams matcher#group(c);
                done;
                nreq#putParameters("urlParams", array urlParams);
                
                //add the named parameters
                for names do name:
                    nreq#putParameter(name, matcher#group(name));
                done;

                //set the new pathInfo and servletPath
                if (contains? "rest" names) and (defined? matcher#group("rest")) then
                    rest = matcher#group("rest");
                    matched = strLeft oreq#getPathInfo() 
                            ((strLength oreq#getPathInfo()) - (strLength rest)); 
                    nreq#setServletPath((oreq#getServletPath()) ^ matched);
                    nreq#setPathInfo(rest);
                else
                    nreq#setPathInfo("");
                    newServletPath = 
                        (oreq#getServletPath()) ^ (oreq#getPathInfo());
                    nreq#setServletPath(newServletPath);
                fi;
                nctxt = octxt with {asyncContext = nreq#startAsync(nreq,response octxt)};
                handler nctxt
            else
                false
            fi;
        fi;
    done;
);









runHandlers handlers ctxt is list<handlerType<'a>> -> 'a -> boolean =
    if empty? handlers then
        false
    else
        if (head handlers) ctxt then
            true;
        else
            runHandlers (tail handlers) ctxt;
        fi
    fi;

lazyHandler moduleName  is string -> handlerType<'b> =
   (var myHandler is (Some handlerType<'b> | None () ) = none;
    loadHandler () = (
        cl = Thread#currentThread()#getContextClassLoader()#loadClass(moduleName);
        mod = cl#getMethod(
            "eval",() as ~Class[])#invoke(() as ~Object, () as ~Object[]);
        jmod = mod unsafely_as {handler is handlerType<'b>};
        h = jmod.handler;
        myHandler := Some h;
        h;
    );
    if not ((load org.yeb.mvc.config).webDynamicReload?) then
        loadHandler();
    else
        do ctxt:
            ha = case myHandler of
                Some h: h;
                None _ : loadHandler ();
            esac;
            ha ctxt;
        done;
    fi);

handlersFact oldVhs = 
   (vhs = array [];
    {
        add handler =
            push vhs handler,
        
        pattern regex handler = add ((regexHandler regex) handler),
        _get regex handler = add ((regexHandler (Get regex)) handler),
        post regex handler = add ((regexHandler (Post regex)) handler),
        put regex handler = add ((regexHandler (Put regex)) handler),
        delete regex handler = add ((regexHandler (Delete regex)) handler),        
        options regex handler = add ((regexHandler (Options regex)) handler),
        head regex handler = add ((regexHandler (Head regex)) handler),
        
        all regex handler add = ((regexHandler (All regex)) handler),        

        lazy regex moduleName = 
            add $ (regexHandler (All regex)) (lazyHandler moduleName),

        get handler () =
            runHandlers (vhs ++ oldVhs),

        newSubRouter () =
            handlersFact (vhs ++ oldVhs),
    });
    

newRouter () = handlersFact [];

localHandler locales handler is list<~Locale> -> handlerAdapterType<'a> = 
   (if empty? locales then
       handler
    else
        lh = hash locales;
        defaultL = head locales;
        do ctxt:
            handler 
                if (request ctxt)#getLocale() in lh then 
                    ctxt
                else
                    nreq = 
                        new YebHttpServletRequestWrapper(false, (request ctxt));
                    nreq#setLocale(defaultL);
                    ctxt with {asyncContext = nreq#startAsync(nreq,response ctxt)};
                fi;
        done;
    fi);



flashHandler handler ctxt is handlerAdapterType<'a> = 
   (sess = (request ctxt)#getSession(true);
    //synchronized on session lazly create the flash structure
    flashStruct = synchronized sess do _:
        f = sess#getAttribute(flashKey);
        flashStruct = if not defined? f then
            fr = {var oldMap = new java.util.HashMap(),
                  var newMap = new java.util.HashMap()};
            sess#setAttribute(flashKey, fr);
            fr;
        else
            f unsafely_as {var oldMap is ~java.util.HashMap,
                           var newMap is ~java.util.HashMap}
        fi;
        //store in the request
        (request ctxt)#setAttribute(flashKey,flashStruct);
        flashStruct;
    done;
    //synchronized on the flashstruct do the rest of the
    //request handling
    synchronized flashStruct do _:
        try
            handler ctxt
        finally
            //do the cleanup again synchronized on the session
            synchronized sess do _:
                flashStruct.oldMap#clear();
                om = flashStruct.oldMap;
                flashStruct.oldMap := flashStruct.newMap;
                flashStruct.newMap := om;
                sess#setAttribute(flashKey,flashStruct);
            done;
        yrt;
    done);


///forces teh creation of a session and synchronizes on the session if
///true on the frist argument
sessionHandler synchOnSession handler ctxt = 
   (session = (request ctxt)#getSession(true);
    if synchOnSession then
        mutex = WebUtils#getSessionMutex(session);
        synchronized mutex \(handler ctxt);
    else
        (handler is handlerType<'a>) ctxt
    fi);

initializedFilterHandler filter handler ctxt 
        is ~Filter -> handlerAdapterType<'a> = 
   (var res = false;
   
    class MyChain extends FilterChain
        void doFilter(ServletRequest sreq, ServletResponse sres)
            res :=
                if (sreq instanceof HttpServletRequest) and
                   (sres instanceof HttpServletResponse)
                then
                    req = sreq unsafely_as ~HttpServletRequest;
                    res = sres unsafely_as ~HttpServletResponse;
                    if (same? req (request ctxt)) 
                       and (same? res (response ctxt)) then
                        handler ctxt
                    else
                        handler (ctxt with {
									asyncContext = req#startAsync(req,res)
								}) 
                    fi
                else
                    failWith "Filter did not transfer HttpServletRequest or HttpServletResponse";
                fi,
    end;
    filter#doFilter(request ctxt, response ctxt,new MyChain());
    res);
    
filterConfig ctxt fparams is ~ServletContext -> hash<string,string> -> 'a = 
   (import java.util:Enumeration, NoSuchElementException;
    params is hash<~String,~String> = fparams:!!!;

    class MyConfig extends FilterConfig
        String getFilterName()
            maybeAt \"filter: \(System#currentTimeMillis())" 
                    id "filterName":!!! 
                    params,

        String getInitParameter(String name)
            maybeAt \(() as ~String) id name:!!! params,

        ServletContext getServletContext() ctxt,

        Enumeration getInitParameterNames() (
            var names = keys params;
            class MyEnum extends Enumeration
                boolean hasMoreElements() not (empty? names),
                Object nextElement()
                    if empty? names then
                        throw new NoSuchElementException();
                    else
                        r = head names;
                        names := tail names;
                        r
                    fi,
            end;
            new MyEnum();
        ),
    end;
    new MyConfig());

filterHandler sctxt filter params 
        is 'b -> ~Filter -> hash<string,string> -> handlerAdapterType<'a> = 
   (cfg = filterConfig sctxt params;
    filter#init(cfg);
    initializedFilterHandler filter);

	
serviceHandler params service =
    case peekObject (service is {}) of
    Struct {fields, value}:
       (serviceFuns = fields
            |> concatMap do field: 
                import yeti.lang.Fun;
                fun = value field;
                if fun instanceof Fun then
                    if field =~ "(^any_.*)|(^get_.*)|(^post_.*)|(^put_.*)|(^delete_.*)" then
                        []
                    else
                        [{field,
                          fun = value unsafely_as ~Object }]
                    fi
                else
                    []
                fi
            done;
        
        services = [:];
        for serviceFuns do {field, fun}:
            fn = do ctxt arg:
                res = ((fun unsafely_as ~Object) unsafely_as 'a -> 'b) arg;
                resstr = if res instanceof yeti.lang.Struct then
                    (response ctxt)#setContentType("text/json;utf-8");
                    (load org.yeb.json).writeJSON [] res;
                else
                    (response ctxt)#setContentType("text/plain;utf-8");
                    string res;
                fi;
                (response ctxt)#getWriter()#print(resstr);
                true;
            done;
            services.[field] := fn;
        done;
        
        defaultFn = do x y: false done;
        setHashDefault services \defaultFn;
        
        do ctxt:
            import java.util.HashMap;
            import yeti.lang.GenericStruct;
            
            req = request ctxt;
            path = (strLower req#getPathInfo());
            fs = (strLower req#getMethod()) ^ '_' ^ path;
            sfun = if fs in services then
                    services.[fs];
                else
                    services.["any_"^path];
                fi;
            jm = new HashMap();
            forJavaMap req#getParameterMap() do k v:
                if defined? (v is ~Object) then
                    value = array (v unsafely_as ~String[]);
                    jm#put(k, E value)
                fi;
                ()
            done;
            arg = new GenericStruct(jm);
            sfun ctxt arg;
        done);    
    _ : failWith "service must be a struct with service functions";
    esac;


{


    //makeNewCtxt,
    rootCtxt,
    mockCtxt,

    asyncListener,
    
    request,
    response,
    locale, 
    servletContext,

    params,
    param,
    isAjax,

    flashKey, 
    flashGet, 
    flashPut,
    flashGetAndKeep,


    urlPatternToRegex,

    idHandler, 
    regexHandler,
    runHandlers,
    sessionHandler,
    newRouter,
    localHandler,
    flashHandler,
    //fooServiceHandler = serviceHandler,

    initializedFilterHandler,
    filterConfig, 
    filterHandler,
	serviceHandler,
}

