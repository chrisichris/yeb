/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.mvc.handler;



import java.lang: Thread, System, 
				  ClassLoader, Character, CharSequence,
				  Runnable;
import java.util: Locale, Date, Collection;
import java.util.regex:Pattern;
import java.util.concurrent.ConcurrentHashMap;
import java.text:NumberFormat, DecimalFormat, DateFormat, SimpleDateFormat;
import java.net: URLEncoder, URLDecoder;
import java.io:File;

import javax.servlet: ServletContext, FilterChain,ServletException,
                      AsyncContext, ServletRequest, AsyncListener;
import javax.servlet: Filter,FilterConfig,ServletRequest,ServletResponse,
					  DispatcherType;
import javax.servlet.http: HttpServletRequest, HttpServletResponse,HttpSession,
							Part;

import org.springframework.mock.web: MockFilterConfig, MockServletContext, 
    MockHttpServletRequest, MockHttpServletResponse,MockFilterChain;
import org.springframework.web.util.WebUtils;

import yeti.lang: Fun, Struct;
import org.yeb:ValidationException, YebUtils;

load org.yeb.std;
load org.yeb.mvc.webutils;
load org.yeb.validation;

typedef handlerResult = Completed string | NotHandled string | Handling string;
typedef handlerType<a> = a -> handlerResult;
typedef handlerAdapterType<a> = handlerType<a> -> handlerType<a>;
     
     

rootCtxt pathInfo sctxt req res asyncContext = 
   (reqn = new YebHttpServletRequestWrapper(() as ~Locale, "",
                                        pathInfo,() as ~java.util.Map, req);
                                        
    timeoutMonitor = monitor ();
    (asyncContext is ~AsyncContext)#addListener(asyncListener do ev:
        case ev of
        OnTimeout ev: timeoutMonitor.fire ();
        _ : ()
        esac
    done);
	{
		asyncContext is ~AsyncContext,
		req = reqn as ~HttpServletRequest,
		res is ~HttpServletResponse,
		sctxt is ~ServletContext,
        monitor = timeoutMonitor,
	});
		


class YebMockAsyncContext(ServletRequest req, ServletResponse res) extends AsyncContext
	
	var timeout = 1000,
	var request = req,
	void addListener(AsyncListener lis)
		(),
	void addListener(AsyncListener lis, ServletRequest req, ServletResponse res)
		(),
	
	void complete() (),
	
	AsyncListener createListener(Class cl)
		failWith "Not supported",
	
	void dispatch() (),
	
	void dispatch(ServletContext ctxt, String path) (),
	void dispatch(String path) (),
	ServletRequest getRequest() request,
	void setRequest(ServletRequest req) request := req,
	ServletResponse getResponse() res,
	long getTimeout() timeout,
	void setTimeout(long t) timeout := t,
	boolean hasOriginalRequestAndResponse() true,
	void start(Runnable ra) failWith "Not supported"
end;

class YebMockHttpServletRequest(MockServletContext ctxt, String reqMethod, String reqPath, MockHttpServletResponse resp) extends MockHttpServletRequest(ctxt,reqMethod, reqPath)
	var asyncContext = new YebMockAsyncContext((),resp),
	
	//void init() asyncContext#setRequest(this),
	
	AsyncContext getAsyncContext() asyncContext,
	boolean isAsyncStarted() true,
	boolean isAsyncSupported() true,
	AsyncContext startAsync() 
		asyncContext := new YebMockAsyncContext(this, resp);
		asyncContext,
		
	AsyncContext startAsync(ServletRequest req, ServletResponse res)
		asyncContext := new YebMockAsyncContext(req,res);
		asyncContext,
		
	Collection getParts () failWith "Not implemented",
	Part getPart(String name) failWith "Not implemented",
	boolean authenticate(HttpServletResponse resp) failWith "Not implemented",
	void logout() (),
	DispatcherType getDispatcherType() failWith "Not implemented",
	void login(String name, String pwd) failWith "Not implemented"
	
	
end;
	
newMockHttpServletRequest method path =
	new YebMockHttpServletRequest(new MockServletContext(), method is string, path is string, new MockHttpServletResponse());  
		

mockCtxt opts = 
   (var reqMethod = "GET";
    var reqPath = "/";
    var resourcePath = "test/resources/webapp";
    var headers = [:];
    var params = [:];
    for opts do opt:
        case opt of
        Get ruri : (reqMethod := "GET";reqPath := ruri);
        Head ruri : (reqMethod := "HEAD";reqPath := ruri);
        Post ruri : (reqMethod := "POST";reqPath := ruri);
        Put ruri : (reqMethod := "PUT";reqPath := ruri);
        Delete ruri : (reqMethod := "DELETE";reqPath := ruri);
        Trace ruri : (reqMethod := "TRACE";reqPath := ruri);
        Connect ruri : (reqMethod := "CONNET";reqPath := ruri);
        ResourcePath str: resourcePath := str;
        Header ha: forHash ha do k v: headers.[string k] := string v done;
        Param ha: forHash ha do k v: 
                params.[string k] := array [(string v) unsafely_as ~String] 
            done;
        Params ha : forHash ha do k v:
                params.[string k] := 
                    array (map do ve: 
                            (string ve) unsafely_as ~String 
                           done v)
            done;
        esac;
    done;


    mockServletCtxt = new MockServletContext(resourcePath);
    mockRes = new MockHttpServletResponse();
    mockReq = new YebMockHttpServletRequest(mockServletCtxt,reqMethod, reqPath,mockRes);

    forHash params do k v:
        mockReq#addParameter(k,v);
    done;
    forHash headers do k v:
        mockReq#addHeader(k,v);
    done;

    ctxt = rootCtxt reqPath mockServletCtxt mockReq mockRes mockReq#startAsync();
	
	
    nc = ctxt with {
        mockServletCtxt,
        mockReq,
        mockRes,
    };
    nc;
);


//HandlerAdapters


idHandler handler is handlerAdapterType<'a> = handler;

urlPatternToRegex pat = 
   (//:a-z is name
    //:a-z? is optional
    //* at end means rest
    //$marks start regex $ marks end regex
    
    import java.util.regex.Pattern;
    
    paS = if strEnds? pat "/*" then 
                    strLeft pat (strLength pat - 2)
               else
                    pat;
               fi;
               
    tokens = matchAll '(/?\.?):(\w+)(\$([^\$]+)\$)?(\?)?' (Token . tail) Text paS;
    
    names = tokens 
        |> map do t:
            case t of
            Token [leading, name, foo, regex, mark]: Some name;
            _ : none;
            esac
        done
        |> catSome
        |> array;
    
    reg = tokens
    |> map do x:
        case x of
        Token [leading, name, foo, regex, mark]:
           (reg = if defined? regex and (strLength regex > 0) then 
                    regex;
                  else
                    '[^/\.]+'
                  fi;
            reg2 = "(?<\(name)>\(reg))";
            
            if defined? mark then
                if defined? leading then
                    "(?:\(Pattern#quote(leading))" ^ reg2 ^ ")?" ;
                else
                    reg2 ^ "?";
                fi;
            else
                if defined? leading then
                    Pattern#quote(leading) ^ reg2
                else
                    reg2;
                fi;
            fi);
        Text tx:
           (Pattern#quote(tx));
        _ : failWith "should not happen";
        esac
    done
    |> strJoin "";
    
    regex = if strEnds? pat "/*" then
        push names "rest";
        reg ^ '(?:/(?<rest>.*))?'
    else
        reg
    fi;
    
    {
        names = nub names,
        regex
    }
    );

    

regexHandlerImpl method regexPattern handler = 
   (meth = strUpper method;
    var checkMethod? = meth == "ALL";
    
    {names, regex} = urlPatternToRegex regexPattern;
    pattern = Pattern#compile(regex);

    do octxt:
        oreq = request octxt;
        if checkMethod? and (meth != (strUpper oreq#getMethod())) then
            notHandled
        else
            matcher = pattern#matcher(oreq#getPathInfo() as ~java.lang.String);
            if matcher#matches() then
                nreq = new YebHttpServletRequestWrapper(true,oreq);

                //add the paramters
                urlParams = array [];
                for [0..matcher#groupCount()] do c:
                    push urlParams matcher#group(c);
                done;
                nreq#putParameters("urlParams", array urlParams);
                
                //add the named parameters
                for names do name:
                    nreq#putParameter(name, matcher#group(name));
                done;

                //set the new pathInfo and servletPath
                if (contains? "rest" names) and (defined? matcher#group("rest")) then
                    rest = matcher#group("rest");
                    matched = strLeft oreq#getPathInfo() 
                            ((strLength oreq#getPathInfo()) - (strLength rest)); 
                    nreq#setServletPath((oreq#getServletPath()) ^ matched);
                    nreq#setPathInfo(rest);
                else
                    nreq#setPathInfo("");
                    newServletPath = 
                        (oreq#getServletPath()) ^ (oreq#getPathInfo());
                    nreq#setServletPath(newServletPath);
                fi;
                nctxt = octxt with {req = nreq as ~HttpServletRequest};
                handler nctxt
            else
                notHandled
            fi;
        fi;
    done;
);

regexHandler requestUrl handler = 
   ({fst = meth , snd = regexPattern} = 
        case requestUrl of
        Get us: pair "GET" us;
        Post us: pair "POST" us;
        Put us: pair "PUT" us;
        Delete us: pair "DELETE" us;
        Options us: pair "OPTIONS" us;
        Head us: pair "HEAD" us;
        All us: pair "ALL" us;
        esac;
    regexHandlerImpl meth regexPattern handler);
    
runHandlers handlers ctxt is list<handlerType<'a>> -> 'a -> handlerResult =
    if empty? handlers then
        notHandled
    else
        case (head handlers) ctxt of
            NotHandled x :
                runHandlers (tail handlers) ctxt;
            x : x;
        esac;
    fi;

lazyHandler moduleName  is string -> handlerType<'b> =
   (var myHandler is (Some handlerType<'b> | None () ) = none;
    loadHandler () = (
        cl = Thread#currentThread()#getContextClassLoader()#loadClass(moduleName);
        mod = cl#getMethod(
            "eval",() as ~Class[])#invoke(() as ~Object, () as ~Object[]);
        jmod = mod unsafely_as {handler is handlerType<'b>};
        h = jmod.handler;
        myHandler := Some h;
        h;
    );
    if not ((load org.yeb.mvc.config).webDynamicReload?) then
        loadHandler();
    else
        do ctxt:
            ha = case myHandler of
                Some h: h;
                None _ : loadHandler ();
            esac;
            ha ctxt;
        done;
    fi);

handlersFact oldVhs adapter= 
   (vhs = array [];
    {
		get adapter () = adapter,
        add handler =
            push vhs (adapter handler),
        
        pattern regex handler = add ((regexHandler regex) handler),
        _get regex handler = add ((regexHandler (Get regex)) handler),
        post regex handler = add ((regexHandler (Post regex)) handler),
        put regex handler = add ((regexHandler (Put regex)) handler),
        delete regex handler = add ((regexHandler (Delete regex)) handler),        
        options regex handler = add ((regexHandler (Options regex)) handler),
        head regex handler = add ((regexHandler (Head regex)) handler),
        
        all regex handler = add ((regexHandler (All regex)) handler),        

        lazy regex moduleName = 
            add $ (regexHandler (All regex)) (lazyHandler moduleName),

        get handler () =
            runHandlers (vhs ++ oldVhs),

        newSubRouter adapter =
            handlersFact (vhs ++ oldVhs) adapter,
    });
    

newRouter adapter = handlersFact [] adapter;

localHandler locales handler is list<~Locale> -> handlerAdapterType<'a> = 
   (if empty? locales then
       handler
    else
        lh = hash locales;
        defaultL = head locales;
        do ctxt:
            handler 
                if (request ctxt)#getLocale() in lh then 
                    ctxt
                else
                    nreq = 
                        new YebHttpServletRequestWrapper(false, (request ctxt));
                    nreq#setLocale(defaultL);
                    ctxt with {req = nreq as ~HttpServletRequest};
                fi;
        done;
    fi);



flashHandler handler ctxt is handlerAdapterType<'a> = 
   (sess = (request ctxt)#getSession(true);
    //synchronized on session lazly create the flash structure
    flashStruct = synchronized sess do _:
        f = sess#getAttribute(flashKey);
        flashStruct = if not defined? f then
            fr = {var oldMap = new java.util.HashMap(),
                  var newMap = new java.util.HashMap()};
            sess#setAttribute(flashKey, fr);
            fr;
        else
            f unsafely_as {var oldMap is ~java.util.HashMap,
                           var newMap is ~java.util.HashMap}
        fi;
        //store in the request
        (request ctxt)#setAttribute(flashKey,flashStruct);
        flashStruct;
    done;
    //synchronized on the flashstruct do the rest of the
    //request handling
    synchronized flashStruct do _:
        try
            handler ctxt
        finally
            //do the cleanup again synchronized on the session
            synchronized sess do _:
                flashStruct.oldMap#clear();
                om = flashStruct.oldMap;
                flashStruct.oldMap := flashStruct.newMap;
                flashStruct.newMap := om;
                sess#setAttribute(flashKey,flashStruct);
            done;
        yrt;
    done);


///forces teh creation of a session and synchronizes on the session if
///true on the frist argument
sessionHandler synchOnSession handler ctxt = 
   (session = (request ctxt)#getSession(true);
    if synchOnSession then
        mutex = WebUtils#getSessionMutex(session);
        synchronized mutex \(handler ctxt);
    else
        (handler is handlerType<'a>) ctxt
    fi);



serviceHandlerSeperators = ["By": "", "From": "", "To": "", "At": ""];
	
serviceHandler service =
    case peekObject service of
    Struct {fields, value}:
       (serviceFuns = fields
            |> map do field: 
                import yeti.lang.Fun;
                fun = value field;
                if fun instanceof Fun then
                    ma = (like "((^any)|(^get)|(^post)|(^put)|(^delete))(.*)" field) ();
                    if not empty? ma then
                        method = ma.[1];
                        fun = value unsafely_as ~Fun;
                        name = ma.[(length ma) - 1];
                        var lastArg = false;
                        names = matchAll "[A-Z][^A-Z]*" 
                            do partA:
                                part = partA.[0];
                                if part in serviceHandlerSeperators then
                                    lastArg := true;
                                    none
                                else
                                    r = if lastArg then
                                        Some (Param (strLower part));
                                    else
                                        Some (Part (strLower part));
                                    fi;
                                    lastArg := false;
                                    r
                                fi
                            done (Some . Part . strLower) name
                            |> catSome;
                        
                        pattern = names
                            |> map do n:
                                case n of
                                Param na: ":\(na)";
                                Part na: na;
                                esac
                            done
                            |> strJoin "/";
                            
                        params = names 
                            |> map do n:
                                case n of
                                Param na: Some na;
                                Part : none;
                                esac;
                            done
                            |> catSome;
                        
                        baseHandler = do ctxt:
                            res = fold 
                                do obj pa:
                                    if (obj is ~Object) instanceof Fun then
                                        fn = obj unsafely_as ~Fun;
                                        maybeParam 
                                            pa 
                                            \(failWith "Excpeting param \(pa) but was not")
                                            do v:
                                                fn#apply(E v) 
                                            done
                                            ctxt;
                                    else
                                        failWith "Function [\(field)] has too few params missing [\(pa)]";
                                    fi;
                                done
                                fun
                                params;
                            resstr = if res instanceof yeti.lang.Struct then
                                (response ctxt)#setContentType("text/json;utf-8");
                                (load org.yeb.json).write [] res;
                            else
                                (response ctxt)#setContentType("text/plain;utf-8");
                                string res;
                            fi;
                            (response ctxt)#getWriter()#print(resstr);
                            Completed "";
                        done;
                        
                        handler = regexHandlerImpl method pattern baseHandler;
                        
                        Some handler
                    else
                        none
                    fi
                else
                    none
                fi
            done
            |> catSome;
        
        router = newRouter id;
        for serviceFuns router.add;
        router.handler);
    _ : failWith "service must be a struct with service functions";
    esac;


(load org.yeb.mvc.webutils) with {


    //makeNewCtxt,
    rootCtxt,
    mockCtxt,
	newMockHttpServletRequest,

    urlPatternToRegex,

    idHandler, 
    regexHandler,
    sessionHandler,
    newRouter,
    localHandler,
    flashHandler,
}

