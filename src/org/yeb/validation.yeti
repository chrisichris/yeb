/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.validation;

import java.lang:String,IllegalArgumentException;
import java.util.regex:Pattern;
import yeti.lang: Fun;
import java.text:NumberFormat, DecimalFormat, DateFormat, SimpleDateFormat;
import java.util: Locale, Date, List,ArrayList, Collections;
import java.net: URLEncoder, URLDecoder;

import org.owasp.esapi:ESAPI;
import org.owasp.validator.html:AntiSamy,Policy;

load org.yeb.std; 

failWithValidation msg value =
    throw new ValidationException(msg, value unsafely_as ~Object);

newValidationException msg value =
    new ValidationException(msg, value unsafely_as ~Object);

validOr notValid valueFn =
    try
        valueFn ();
    catch MessageException ex:
        notValid;
    yrt;


validateFn notValidFn valueFn validFn value =
    try
        v = validFn value;
        valueFn v;
    catch MessageException ex:
        notValidFn ex;
    yrt;
        
maybeValid notValidFn validFn valueFn =
    validateFn notValidFn validFn valueFn (); 


//validator () = ESAPI#validator();
esapiToValiEx ex wrong = 
   (msg = message 
            "esapi" 
            (ex is ~org.owasp.esapi.errors.ValidationException)#getUserMessage()
            [];
    newValidationException msg wrong);

valiCheck fun value =
    if fun value then
        value;
    else
        failWithValidation (message "wrong_value" "wrong vaue %1$s" [obj value]) value;
    fi;

valiMsg fun value = 
    case fun value of
    None _ : value;
    Some msg : 
       (mg is ~Message = msg;
        failWithValidation mg value);
    esac;

valiListLength min max listIn is number -> number -> list<'a> -> list<'a>= (
    l = length listIn;
    if l < min then
        failWithValidation(message "listtooshort" "list length must be minimal %1$s but is %2$s" [obj length, obj min]) listIn;
    elif (max > 0) and (l > max) then
        failWithValidation(message "listtoolong" "list length must be maximal %1$s but is %2$s" [obj length, obj min]) listIn;
    else
        listIn
    fi
);

valiNum min max num =
    if num > max then
        failWithValidation (message "numtoohigh" "number must be max %1$s but is %2$s" [max:!, min:!]) num;
    elif num < min then
        failWithValidation(message "numtoolow" "number must be min %1$s but is %2$s" [min:!, min:!]) num;
    else
        num
    fi;

valiHtml policy input =
    (pol = Policy#getInstance(policy is string);
    aS = new AntiSamy();
    string aS#scan(input,pol,AntiSamy#SAX)#getCleanHTML() );


valiSafeHtml max input =
    string try ESAPI#validator()#getValidSafeHTML("",input is string, max, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex input) yrt;


valiEmail max input =
    string try ESAPI#validator()#getValidInput("",input is string, "Email", max, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex input) yrt;

valiIPAddress max input =
    string try ESAPI#validator()#getValidInput("",input is string, "IPAddress", max, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex input) yrt;

valiURL max input =
    string try ESAPI#validator()#getValidInput("",input is string, "URL", max, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex input) yrt;

valiList vali listIn  = 
    listIn |> filter (validateFn \false \true vali);


valiString min max str = 
    try
        ret = ESAPI#validator()#getValidPrintable("",str is string, max is number, false);
        if (strLength ret) < min then
            failWithValidation
                (message "stringtooschort" "string %1$s is only %2$n long but should be at leas %3$n long"
                        [str:!,(strLength ret):!,min:!])
                ret;
        else
            ret
        fi;
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex str) yrt;

valiRedirectLocation input =
    try ESAPI#validator()#getValidRedirectLocation("",input is string, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex input) yrt;


valiRegex regexPattern str =
    if str =~ regexPattern then
      str
    else
        failWithValidation(message "stringpattern" "string %1$s does not match pattern %2$s" [obj str, obj regexPattern]) str;
    fi;

strToNum str = 
    try 
        number str;
    catch Exception ex:
        failWithValidation(message "numpattern" "string %1$s is no number" [obj str]) str;
    yrt;

valiDirectory parent path =
    try ESAPI#validator()#getValidDirectoryPath("",path is string,new java.io.File(parent is string),  false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex path) yrt;

valiFileName extensions path =
    try ESAPI#validator()#getValidFileName("",path is string,extensions is list<string>,  false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex path) yrt;


numberFormat formatOpt =
    case formatOpt of
        Format f: f;
        Pattern s: (
             f=NumberFormat#getInstance();
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(s);
             fi;
             f);
        PatternLoc {pattern,loc}: (
             f=NumberFormat#getInstance(loc);
             if f instanceof DecimalFormat then
                df = (f unsafely_as ~DecimalFormat);
                df#applyPattern(pattern);
             fi;
             f);
        None (): NumberFormat#getInstance();
    esac;

strFormatedToNum formatOpt str is 'a -> string -> number=
    try
        format = numberFormat formatOpt;
        format#parse(str)#doubleValue()
    catch Exception e:
        failWithValidation (message "nonum" "%1$s is no number" [obj str]) str;
    yrt;

numToFormatedStr formatOpt num =
    (numberFormat formatOpt)#format(num);

strNumberToDate str =
      try
          new Date(number str)
      catch java.lang.Exception ex:
          failWithValidation (message "nonum" "%1$s is no number" [obj str]) str;
      yrt;

dateToNumberStr date is ~Date -> string = string date#getTime();

dateFormat formatOpt = 
     case formatOpt of
        Format f: f;
        Pattern s: (new SimpleDateFormat(s)) as ~DateFormat; 
        PatternLoc {pattern,loc}:
           (new SimpleDateFormat(pattern as ~java.lang.String,(loc as ~Locale))) as ~DateFormat;
        None _ : DateFormat#getDateInstance();
     esac;
     
strFormatedToDate formatOpt str =
    try
          ESAPI#validator()#getValidDate("",str is string, (dateFormat formatOpt),false)
    catch org.owasp.esapi.errors.ValidationException ex:
          failWithValidation (message "nodate" "%1$s is no date" [obj str]) str;
    yrt;

dateToFormatedStr formatOpt date = 
    (dateFormat formatOpt)#format(date);



strToBoolean str is string -> boolean=
    if (strLower str) == "true" then true else false fi;

valiCreditCard str =
    string try ESAPI#validator()#getValidCreditCard("",str is string, false)
    catch org.owasp.esapi.errors.ValidationException ex: throw (esapiToValiEx ex str) yrt;

ve converter v = 
    case v of
    E s : converter s;
    V v : v;
    esac;

veMaybe converter nfn sfn v = 
    if not defined? v then
        nfn()
    else
        case v of
        Some s: sfn (ve converter s);
        None (): nfn();
        esac;
    fi;

veList converter v =
    if not defined? v then
        []
    else
        case v of
        E vl : map converter vl;
        V vl : vl;
        esac;
    fi;
    
ves v = ve string;
ven v = ve strToNum;
    
{
    ve, 
    veMaybe,
    veList,
    ves,
    ven,
    
    failWithValidation,
    newValidationException,
    validOr, 
    maybeValid,
    validateFn,

    
    valiHtml, 
    valiSafeHtml,
    valiCreditCard, 
    valiEmail, 
    valiIPAddress, 
    valiURL,

    valiListLength, 
    valiList,

    valiString,
    valiRegex, 
    valiNum,

    valiCheck, 
    valiMsg,

    strToNum,
    valiDirectory, 
    valiFileName,
    valiRedirectLocation,

    numberFormat, 
    strFormatedToNum,
    numToFormatedStr,
    strNumberToDate, 
    dateToNumberStr, 
    dateFormat, 
    strFormatedToDate, 
    dateToFormatedStr,
    strToBoolean

}