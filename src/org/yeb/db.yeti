/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.db;

import java.lang: StringBuilder, ThreadLocal,Throwable;
import java.sql:Connection, SQLException, SQLWarning, Statement,PreparedStatement, Types,ResultSet,Timestamp;
import javax.sql:DataSource;
import java.util.regex.Pattern;

load org.yeb.std;

typedef connectionProviderType<a> = {
    connection is ~Connection,
    rollbackOnly is () -> (),
    rollbackOnly? is boolean,
} 


class DBValue(Object value, int sqlType)
    int getSqlType() sqlType,
    Object getValue() value,
    boolean isNull() nullptr? value,
end;

logger = getLogger "sql";


sqlWarningExceptionString warning is ~SQLWarning -> string = (
    if defined? warning then
        stb = new StringBuilder();
        stb#append("\n----SQLWarning----\n");
        var war = warning;
        (defined? war) loop (
            _ = stb#append("Message: [\(war#getMessage())] | SQLState: [\(war#getSQLState())] | ErrorCode: [\(war#getErrorCode())]");
            war := war#getNextWarning();
        );
        string (stb#toString());
    else
        ""
    fi;
);


_setStatementValue ps pos value is ~PreparedStatement -> number -> ~Object -> number = (
    import yeti.lang: Num,BigNum,RatNum,IntNum,FloatNum,AList, Tag;
    import java.lang: Number, String, CharSequence;
    import java.sql:Time, Timestamp;
    import java.util: Date,Calendar;

    var index = pos;
    if nullptr? value then
        //this is the empty list we set nothing
    elif (value instanceof Tag) and ((value unsafely_as ~Tag)#name == "Some") then
        t = (value unsafely_as ~Tag);
        index := _setStatementValue ps pos t#value;
        index := index -1; //decrease because below we increas and index is already at next position
    elif (value instanceof Tag) and ((value unsafely_as ~Tag)#name == "None") then
        //set to null
        //taken from springs StatementCreatorUtils (apache license)
        try
            dbmd = ps#getConnection()#getMetaData();
            databaseProductName = string dbmd#getDatabaseProductName();
            jdbcDriverName = string dbmd#getDriverName();
            if (strStarts? databaseProductName "Informix") or (strStarts? jdbcDriverName "Microsoft SQL Server") then
                //use setObject
                ps#setObject(index,() as ~Object);
            elif (strStarts? databaseProductName "DB2") or
                    (strStarts? jdbcDriverName "jConnect") or
                    (strStarts? jdbcDriverName "SQLServer") or
                    (strStarts? jdbcDriverName "Apache Derby") then
                //set with VARCHAR
                ps#setNull(index, Types#VARCHAR);
            else
                //set with null type
                ps#setNull(index,Types#NULL);
            fi;
        catch Throwable ex:
            //set with null type
            ps#setNull(index,Types#NULL);
        yrt

    elif value instanceof CharSequence then
        ps#setString(index, string value);
    elif (value instanceof Time) or (value instanceof Timestamp) or (value instanceof java.sql.Date) then
        ps#setObject(index,value);
    elif value instanceof Date then
        d = value unsafely_as ~Date;
        t = new Timestamp(d#getTime());
        ps#setTimestamp(index,t);
    elif value instanceof Calendar then
        c = value unsafely_as ~Calendar;
        t = new Timestamp(c#getTime()#getTime());
        ps#setTimestamp(index,t);
    elif (value instanceof IntNum) or (value instanceof BigNum) then
        n = value unsafely_as ~Number;
        ps#setLong(index,n#longValue());
    elif value instanceof Num then
        n = value unsafely_as ~Number;
        ps#setDouble(index,n#doubleValue());
    elif value instanceof AList then
        l = value unsafely_as list<~Object>;
        for l do v: index := _setStatementValue ps index v done;
        index := index -1; //decrease index because below we increas and it is already at next position
    elif value instanceof DBValue then
        dv = value unsafely_as ~DBValue;
        if dv#isNull() then
            ps#setNull(index,dv#getSqlType());
        else
            ps#setObject(index,dv#getValue(),dv#getSqlType());
        fi
    else
        ps#setObject(index,value);
    fi;
    index + 1;
);

_expandPattern = Pattern#compile('\?');
_expandSql sql params is string -> list<~Object> -> string = (
        import java.lang:StringBuffer,CharSequence;
        import yeti.lang:AList;

        m = _expandPattern#matcher(sql unsafely_as ~CharSequence);
        result = new StringBuffer();
        var rest = params;
        (m#find()) loop (
            if empty? rest then
                failWith "There are more questionmarks than params [\(length params)] in the sql: \(sql)"
            fi;
            param = head rest;
            rest := tail rest;

            questionMarks =
                if param instanceof AList then
                    l = param unsafely_as list<'a>;
                    strJoin "," (map \"?" l);
                elif nullptr? param then
                    ""
                else
                    "?"
                fi;
            m#appendReplacement(result, questionMarks);
        );
        m#appendTail(result);
        string result;
    );




_resultSetWrapper rs = 
   (maybePNum pos = objectMaybeNum (rs is ~ResultSet)#getObject(pos is number);
    maybeNum name = objectMaybeNum rs#getObject(name is string);
    maybePStr pos =
        (s = rs#getString(pos is number);
        if not defined? s then none else Some s fi);
    maybeStr name =
        (s = rs#getString(name is string);
        if not defined? s then none else Some s fi);
    
    {
        resultSet = rs is ~ResultSet,

        pnum pos = maybe 0 id (maybePNum pos),
        num name = maybe 0 id (maybeNum name),

        pstr pos = maybe "" id (maybePStr pos),
        str name = maybe "" id (maybeStr name),

        pbool pos = rs#getBoolean(pos is number),
        bool name = rs#getBoolean(name is string),

        maybeNum,
        maybePNum,
        maybeStr,
        maybePStr,
    });


        
withConnection dataSource fn =
    (con = (dataSource is ~DataSource)#getConnection();
    try
        oldAutoCommit = con#getAutoCommit();
        con#setAutoCommit(false);
        try
            var rbOnly = false;
            arg = {
                connection = con,
                
                get rollbackOnly? () = rbOnly,
                
                rollbackOnly () = rbOnly := true,
                
                operateStatement sql params statementHandler = 
                   (esql = _expandSql sql params;
                    try
                        ps = con#prepareStatement(esql);
                        try
                            _ = _setStatementValue ps 1 (params:!);

                            r is ~Object = statementHandler ps;

                            if defined? ps#getWarnings() then
                                logger#info(sqlWarningExceptionString(ps#getWarnings()))
                            fi;
                            r
                        finally
                            ps#close()
                        yrt;
                    catch Exception ex:
                        //println "Wrong Sql \(esql)";
                        logger#error("Wrong Sql [%1]",esql,ex);
                        throw ex;
                    yrt)

            };
            r = fn arg;
            if rbOnly then
                con#rollback();
            else
                con#commit();
            fi;
            r;
        catch Exception ex:
            con#rollback();
            throw ex;
        finally
            con#setAutoCommit(oldAutoCommit)
        yrt
    finally
        if defined? con then
            con#close();
        fi
    yrt);

sqlUpdate sql params cp =
   (handler st is ~PreparedStatement -> ~Object =
        st#executeUpdate() unsafely_as ~Object;
    r is ~Object = cp.operateStatement sql params handler;
    r unsafely_as number);    

sqlBaseQuery sql params resultSetHandler cp =
    (cp.operateStatement sql params  
        do st: 
            r = (resultSetHandler is 'a -> 'b) 
                (_resultSetWrapper (st is ~PreparedStatement)#executeQuery());
            r unsafely_as ~Object
        done) unsafely_as 'b;
    
    
_tlConnection = threadLocal none;
    
withTLConnection dataSource fn =    
    case _tlConnection.value of
    None _: 
        withConnection dataSource 
            do prov: 
                oP = _tlConnection.value;
                try 
                    _tlConnection.value := Some prov;
                    fn prov
                finally
                    _tlConnection.value := oP;
                yrt
            done;
    Some prov: fn prov;
    esac;

     



///////////////////////////////////////////
//update helpers

sqlInsertEntity  tableName stru cP =
   (import yeti.lang: Struct;

    ist = (stru:!) unsafely_as ~Struct;
    stb = new StringBuilder();
    stb#append("INSERT INTO \(tableName) (");

    values = array [];


    for [0 .. ist#count() -1] do i:

        //add names to sql
        name = string YebUtils#camelCaseToUnderline(ist#name(i));
        if i > 0 then stb#append(", "); fi;
        stb#append(name);

        //collect values
        push values ist#get(i);
    done;

    //the values list will be expanded to ? by sql update
    stb#append(") VALUES (?)"); 

    sqlUpdate stb#toString() [(list values):!] cP;
);

sqlUpdateEntity tableName stru whereClause whereParams db = 
    (import yeti.lang: Struct;

    ist = (stru:!) unsafely_as ~Struct;
    stb = new StringBuilder();
    stb#append("UPDATE \(tableName) SET ");

    values = array [];

    for [0 .. ist#count() -1] do i:

        //add names to sql
        name = string YebUtils#camelCaseToUnderline(ist#name(i));
        if i > 0 then stb#append(", "); fi;
        stb#append(name);
        stb#append(" = ?");

        //collect values
        push values ist#get(i);
    done;

    stb#append(" ");
    stb#append(whereClause);

    params = values ++ whereParams;
    sqlUpdate stb#toString() params db);

    
sqlUpdateById tableName stru db = 
   (import yeti.lang: Struct;

    ist = (stru:!) unsafely_as ~Struct;
    stb = new StringBuilder();
    stb#append("UPDATE \(tableName) SET ");

    values = array [];
    var idField is ( None () | Some string ) = none;
    var idValue is ~Object = ():!;

    var first = true;
    for [0 .. ist#count() -1] do i:

        //add names to sql
        name = string YebUtils#camelCaseToUnderline(ist#name(i));

        if(name == "id") or (strEnds? name "_id") then
            idField := Some name;
            idValue := ist#get(i);
        else
            if first then first := false else stb#append(", "); fi;
            stb#append(name);
            stb#append(" = ?");

            //collect values
            push values ist#get(i);
        fi
    done;

    case idField of
    None _ : failWith "the struct must contain a 'id' or '*_id' field";
    Some n : 
       (stb#append(" WHERE \(n) = ?");
        push values idValue;
        sqlUpdate stb#toString() (list values) db);
    esac);

//value getters
    
//////////////////////////////////////////
//query helpers



sqlList sql setters rowHandler ds =
    sqlBaseQuery sql setters 
        do rs:
            ret = array [];
            ((rs.resultSet) is ~ResultSet)#next() loop push ret (rowHandler rs);
            list ret;
        done
        ds;

sqlSome sql setters rowHandler ds =
    sqlBaseQuery sql setters 
        do rs:
            if ((rs.resultSet) is ~ResultSet)#next() then
                Some (rowHandler rs)
            else
                none
            fi
        done
        ds;



//Helpers for handling datasource exception etc

sqlExceptionString seq is ~SQLException -> string = (
    ib ex sb is ~SQLException -> ~StringBuilder -> () = (
        _ = sb#append("SQLState: [\(ex#getSQLState())] | Error Code: [\(ex#getErrorCode())] | Message: [\(ex#getMessage())]\n");
        var t = ex#getCause();
        defined? t loop (
            _ = sb#append(string t)#append("\n");
            t := t#getCause();
        );
        if defined? ex#getNextException() then
            ib ex#getNextException() sb;
        fi;
    );
    stb = new StringBuilder();
    stb#append(string seq);
    stb#append(string seq#getStackTrace());
    ib seq stb;
    string (stb#toString());
);



{


cDB () = 
    case _tlConnection.value of
    None _ : failWith "No current connection";
    Some v : v;
    esac,

withConnection,
withTLConnection,
sqlUpdate,
sqlBaseQuery,
sqlInsertEntity,
sqlUpdateEntity,
sqlUpdateById,
sqlList,
sqlSome,
sqlExceptionString,


nullString = new DBValue((),Types#VARCHAR),
nullInt = new DBValue((),Types#BIGINT),
nullDouble = new DBValue((),Types#DOUBLE),
nullBoolean = new DBValue((),Types#BOOLEAN),
nullTimestamp = new DBValue((),Types#TIMESTAMP),



}










