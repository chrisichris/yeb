/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.httpclient;


load org.yeb.std;

forkjoin = load org.yeb.forkjoin;


oauthHandlers provider apiKey apiSecret callbackUrl serviceBuilderOpt =
   (import org.scribe.model:Verfifier;
    import org.scribe.oauth:OAuthService;
    import org.scribe.model:Verifier,Token; 
    import org.scribe.builder:ServiceBuilder;

    webutils = load org.yeb.mvc.webutils;
    mvc = load org.yeb.mvc.handler;
    
    providerCl = case provider of
        Twitter () : classOf org.scribe.builder.api.TwitterApi;
        Google () : classOf org.scribe.builder.api.GoogleApi;
        Facebook () : classOf org.scribe.builder.api.FacebookApi;
        Yahoo () : classOf org.scribe.builder.api.YahooApi;
        Other cl : (cl is ~java.lang.Class);
        esac;
    
    builder = (new ServiceBuilder())
        #provider(providerCl)
        #callback(callbackUrl)
        #apiKey(apiKey)
        #apiSecret(apiSecret);
    
    service is ~OAuthService = case serviceBuilderOpt of
        None _ : builder#build();
        Some fn : fn builder;
        esac;
    
    
    initHandler ctxt = 
       (token = service#getRequestToken();
        (webutils.session ctxt)#setAttribute("oauth.request_token", token);
        confirmURL = service#getAuthorizationUrl(token);
        webutils.redirectView confirmURL ctxt);

    callbackHandler tokenHandler ctxt =
       (oauth_token = webutils.param ctxt "oauth_token";
        oauth_verifier = webutils.param ctxt "oauth_verifier";
        username = webutils.param ctxt "username";
        
        verifier = new Verifier(oauth_verifier);
        requestToken = 
            (webutils.session ctxt)#getAttribute("oauth.request_token")
                unsafely_as ~Token;
        
        accessToken = 
            service#getAccessToken(requestToken, verifier);
        
        user_key = string accessToken#getToken();
        user_secret = string accessToken#getSecret();
        
        tokenHandler {user_key, user_secret, apiKey, apiSecret} ctxt);
    
    {initHandler, callbackHandler, service, apiKey, apiSecret});
    

    

client opts =
   (import com.ning.http.client:AsyncHttpClient,
                Realm, Realm$RealmBuilder,
                Realm$AuthScheme,
                AsyncHttpClientConfig$Builder,
                SignatureCalculator;
    import com.ning.http.client.oauth:ConsumerKey, RequestToken,
                                      OAuthSignatureCalculator;
    
    
    var config  = none;
    applyConfig fn = 
        case config of
        None () : 
            (b = new AsyncHttpClientConfig$Builder();
             config := Some b;
             _ = fn b;
             ());
        Some b : (_ = fn b; ());
        esac;
    
    var signature = none; 
    
    for opts do opt:
        case opt of
        Config fn: applyConfig fn;
        Realm fn:
           (realm is ~Realm = fn (new Realm$RealmBuilder());
            applyConfig do b: b#setRealm(realm) done);
        BasicAuth {principal, password}:
           (realm = (new Realm$RealmBuilder())
                #setPrincipal(principal is string)
                #setPassword(password is string)
                #setUsePreemptiveAuth(true)
                #setScheme(Realm$AuthScheme#BASIC)#build();
            applyConfig do b: b#setRealm(realm) done);
        Oauth {api_key, api_secret, user_key, user_secret} :
           (consumer = new ConsumerKey(api_key is string, api_secret is string);
            user = new RequestToken(user_key is string, user_secret is string);
            calc = new OAuthSignatureCalculator(consumer,user);
            
            signature := Some (calc as ~SignatureCalculator));
        esac
    done;
    
    client = case config of
        Some b: new AsyncHttpClient(
                (b is ~AsyncHttpClientConfig$Builder)#build());
        None _: new AsyncHttpClient ();
        esac;
    
    case signature of
    Some s: client#setSignatureCalculator(s as ~SignatureCalculator);
    None _: client;
    esac);


request opts url httpClient cb =
   (import com.ning.http.client:AsyncHttpClient, Response,
                AsyncCompletionHandler, SignatureCalculator;
    import com.ning.http.client.oauth:ConsumerKey, RequestToken,
                                      OAuthSignatureCalculator;
    import java.util.concurrent:TimeUnit;
    import java.lang.Throwable;   
    
    var configFn = \();
    var signature = none;
    var handlerOpt = none;
    
    for opts do opt:
        case opt of
        Config fn : configFn := fn;
        Handler fn: handlerOpt := Some fn;
        Oauth {api_key, api_secret, user_key, user_secret} :
           (consumer = new ConsumerKey(api_key is string, api_secret is string);
            user = new RequestToken(user_key is string, user_secret is string);
            calc = new OAuthSignatureCalculator(consumer,user);
            
            signature := Some (calc as ~SignatureCalculator));
        esac
    done;
    
    builder = case url of
    Get us: (httpClient is ~AsyncHttpClient)#prepareGet(us);
    Post us: httpClient#preparePost(us);
    Put us: httpClient#preparePut(us);
    Delete us: httpClient#prepareDelete(us);
    Options us: httpClient#prepareOptions(us);
    Head us: httpClient#prepareHead(us);
    Connect us: httpClient#prepareConnect(us);
    Request us: httpClient#prepareRequest(us);
    esac;
    
    _ = case signature of
    Some s: builder#setSignatureCalculator(s);
    None _: builder;
    esac;
    
    _ = configFn builder;
    
	
 	class MyAsyncCompletitionHandler extends AsyncCompletionHandler 
			Object onCompleted(Response resp)
				cb (Value resp);
				resp,
			void onThrowable(Throwable ta)
				cb (Exception ta),
	end;
	
	builder#execute(new MyAsyncCompletitionHandler()));
	
requestTask mapFn opts url httpClient =
	forkjoin.map mapFn
		(forkjoin.callbackTask (request opts url httpClient));
	
{    
    oauthHandlers,
    client,
    request,
	requestTask,
    invoke opts url httpClient = 
		forkjoin.invoke (requestTask id opts url httpClient),
}    