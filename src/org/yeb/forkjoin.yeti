/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.forkjoin;

import java.util.concurrent:ForkJoinTask,
							ForkJoinPool,
							RecursiveTask,
							Future;
							
import java.lang.Throwable;

std = load org.yeb.std;

typedef converter<a> = ~Object -> a;

typedef taskStruct<a> = {
    task is ~ForkJoinTask,
    converter is converter<a>
}


pool = new ForkJoinPool();

newTaskStruct monitor task converter = 
	   (import java.util.concurrent.ForkJoinTask;
        monitor.register \(_ = (task is ~ForkJoinTask)#cancel(true));
		{
			task,
			converter is ~Object -> 'a,
            monitor
		});
	
recursiveTask monitor fn is 'm -> (() -> 'a) -> taskStruct<'a> = 
   (class StdRecursiveTask extends RecursiveTask
		Object compute()
			res = (fn ()) unsafely_as ~Object;
			res,
	end;
	newTaskStruct 
            monitor
            (new StdRecursiveTask ()) 
			do x: x unsafely_as 'a done);

completableTask monitor converter is 'mo -> converter<'a> -> taskStruct<'a> =
   (class StdAsyncForkJoinTask extends ForkJoinTask
		var result = () unsafely_as ~Object,
		
		boolean exec()
			false,
		
		void setRawResult(Object res)
			result := res,
		Object getRawResult()
			result
	end;
	task = new StdAsyncForkJoinTask();
    
	newTaskStruct 
		monitor
        (task unsafely_as ~ForkJoinTask)
		converter);


_map fn task is ('a -> 'b) -> taskStruct<'a> -> taskStruct<'b> =
	task with {
		converter obj = fn (task.converter obj)
	};
	
	
execute taskStruct = 
	taskStruct.converter (pool#invoke(taskStruct.task));

   
invoke taskStruct is taskStruct<'a> -> 'a= 
    if ForkJoinTask#inForkJoinPool() then
		taskStruct.converter 
			((taskStruct.task is ~ForkJoinTask)#invoke());
	else
		taskStruct.converter
			(pool#invoke(taskStruct.task))
	fi;
	
invokeAll taskStructs is list<taskStruct<'a>> -> list<'a>=
	if ForkJoinTask#inForkJoinPool() then
		toexec = taskStructs |> map do stru:
			stru.task is ~ForkJoinTask
		done;
		ForkJoinTask#invokeAll(array toexec);
		taskStructs |> map do stru:
			r = (stru.task is ~ForkJoinTask)#get();
			stru.converter r;
		done;
	else
		taskStructs |> map do {task, converter}: 
				{
					future = pool#submit(task is ~ForkJoinTask),
					converter
				}
			done
		|> map do {future, converter}:
				converter ((future is ~ForkJoinTask)#get());
			done;
	fi;	

asyncTask opts monitor fn is 'o -> 'm -> (() -> 'a) -> taskStruct<'a>=
   (ct = completableTask 
            monitor
            do x: x unsafely_as 'a done;
    _ = std.async (opts ++ [Monitor monitor]) do: 
        try
            ct.task#complete((fn ()) unsafely_as ~Object);
        catch Throwable th:
            ct.task#completeExceptionally(th);
        yrt;
    done;
    ct);
	
callbackTask monitor cbfn is 'mo -> (((Value 'a | Exception 't) -> ()) -> 'r2) -> taskStruct<'a>=
   (ct = completableTask 
            monitor
            do x:x unsafely_as 'a done;
    cbfn do ath:
            case ath of
                Value a: 
                    ct.task#complete(a unsafely_as ~Object);
                Exception t:
                    ct.task#completeExceptionally(t is ~Throwable);
            esac;
        done;
    ct);
		
	

async opts monitor fn =
	invoke (asyncTask opts monitor fn);

{
	pool,
	map fn task = _map fn task,
	recursiveTask, 
	//completableTask, 
	callbackTask,
	asyncTask,
	async,
	execute, 
	invoke, 
	invokeAll,
} 
	