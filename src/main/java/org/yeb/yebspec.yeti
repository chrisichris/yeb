/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeb.yebspec;

import java.lang: Throwable,Exception;
import yeti.lang.FailureException;
import junit.framework: Test,TestSuite, TestCase, TestResult, AssertionFailedError;

std = load org.yeb.std;

assertLabelThreadLocal = threadLocal "";

testFail msg = (
    msge = assertLabelThreadLocal.value ^ " " ^ msg;
    throw new AssertionFailedError(msge)
);

assertLabel msg assert = (
    oldMsg = assertLabelThreadLocal.value;
    assertLabelThreadLocal.value := oldMsg ^ " | " ^ msg;
    try
        assert ();
    finally
        assertLabelThreadLocal.value := oldMsg; 
    yrt;
);

assertThat msg cond = if not cond then testFail msg else () fi;

assertTrue cond = if not cond then testFail "Should be true but was false" else () fi;

assertFalse cond = if cond then testFail "Should be false but was true" else () fi;

assertEquals right test = 
    if right != test then
        testFail ("Should be [\(right)] but was [\(test)]")
    else () fi;


assertSame right test =
    if same? right test then
        ();
    else
        testFail "Not same: Test-value [\(test)] schould be same as [\(right)]";
    fi;

assertDefined value = if defined? value then () else testFail "Should be defined but was not" fi;

assertEmpty value = assertThat "Is not empty" (empty? value);

assertNotEmpty value = assertThat "Was empty but should not" (not empty? value);

assertContains e list1 =
    if not (contains e list1) then
        testFail "Element [\(e)] of second list is not contained in first list"
    fi;

assertContainsAll list1 list2 =
    for list2 do e: assertContains e list1; done;

assertEqualElements list1 list2 =
    if (length list1) == (length list2) then
        assertContainsAll list1 list2;
    else
        testFail "list1 [\(list1)] has different length than [\(list2)]";
    fi;


assertExceptionIs exception code is ~java.lang.Exception -> (() -> 'a) -> ()=
    try
        r = code ();
        testFail "should be an exception of \(exception#getClass()) but was none";
    catch Exception ex:
        if exception#getClass()#isAssignableFrom(ex#getClass()) then
            ();
        else
            throw ex;
        fi
    yrt;



assertException code =
    try _ = code (); testFail "should throw an Exception but was none"; catch Exception ex: () yrt;

assertFailWith code =
    try code (); testFail "should have a FailerException (failWith) but was none"; catch FailureException ex: () yrt;

assertNotEquals right test =
    if right == test then
        testFail ("\(test) should not be [\(right)] but was equal")
    else () fi;

assertEqualsObj right left = (
    objr = right unsafely_as ~Object;
    objl = left unsafely_as ~Object;
    if (nullptr? objr) then
        if not (nullptr? objl) then
            testFail ("Should not be [\(right)] but was equal");
        fi
    else
        if not objr#equals(objl) then
            testFail ("Should not be [\(right)] but was equal");
        fi
    fi;
);


assertSome opt =
    case opt of
        None _: testFail "expected some was none";
        Some _: ();
    esac;


assertSomeEquals v opt =
    case opt of
        None _: testFail "expected some was none";
        Some v1: assertEquals v v1;
    esac;

assertNone opt =
    case opt of
        None _ : ();
        Some v : testFail "expected None was Some \(v)";
    esac;

assertLeft fun leftOrRight  =
    std.maybeRight do l: fun l; () done do r: testFail "expected Left but was \(leftOrRight)" done leftOrRight;

assertRight fun leftOrRight =
    case leftOrRight of
        Left lv: testFail "expected Right but was Left \(lv)";
        Right r: (fun r;());
    esac;

assertRightEquals value leftOrRight =
    assertRight do rv: assertEquals value rv done leftOrRight;

assertLeftEquals value leftOrRight =
    assertLeft do rv: assertEquals value rv done leftOrRight;

///////////////////////////////////
//generators

_limit generator = take 100 generator;

listRandomInts from to = map do v: (int (v * to)) + from done (std.randomList ());

randomInts from to = _limit (listRandomInts from to);

listOneOf choice = (
    a = array choice;
    map do i: a.[i] done (listRandomInts 0 (length choice));
);

oneOf choice = _limit (listOneOf choice);


listListsOf lengthFrom lengthTo generator = (

    lol lengthGenerator generator =
        take (head lengthGenerator) generator :.
            \(lol (tail lengthGenerator) (tail generator));
    lol (listRandomInts lengthFrom lengthTo) generator;
);


listsOf lengthFrom lengthTo generator =
    _limit (listListsOf lengthFrom lengthTo generator);


//implementation

typedef resultNode = {name is string,
                      var parent is None 'a | Some resultNode,
                      var children is list<resultNode>,
                      var result is Right () | Exception ~java.lang.Exception | Fail ~AssertionFailedError,
                      var msg is string,
                      var rights is number,
                      var fails is number,
                      var exceptions is number,
                      };

_exceptionStrackTraceExcludes = ["org.yeb.yebshell", "org.yeticl", "org.yeb.yebspec","yeti.lang"];

_exceptionStackTrace count ex is number -> ~java.lang.Throwable -> string = (
    import java.io:PrintWriter, StringWriter;
    import java.lang:StringBuilder, StackTraceElement;

    (|>) x y = y x;

    wrapArray ex#getStackTrace()
        |> filter
            do stackTI:
                stackT is ~StackTraceElement = stackTI;
                name = string stackT#getClassName();
                fold do o s:
                           o and not (strStarts? name s)
                        done true _exceptionStrackTraceExcludes;
            done
        |> take if count < 0 then 1000 else count fi
        |> map string
        |> strJoin "\n        at ";
);



_newNode name is string -> resultNode = (
    {name,
    var parent = none,
    var children = [],
    var result = Right (),
    var msg = "",
    var rights = 0,
    var fails = 0,
    var exceptions = 0
    }
);

_parentNodeTL = (x is None () | Some resultNode = none; threadLocal x);

_specs maybeParentNodeIn name action is ( None () | Some resultNode ) -> string -> (resultNode -> 'a) -> resultNode= (


    //executes given action on each node and all its ancestors (parents)
    withParents node ac = (
        ac node;
        case node.parent of
            None _ : ();
            Some n : withParents n ac;
        esac;
    );
 
    
    maybeParentNode = case maybeParentNodeIn of
                         None _: _parentNodeTL.value;
                         Some _ : maybeParentNodeIn;
                      esac;
    
    //creaet node for esecuting this
    myNode = _newNode name;
    myNode.parent := maybeParentNode;
    case maybeParentNode of
        None _: ();
        Some pn : pn.children := pn.children ++ [myNode]; 
    esac;

    //set our node as the new thread local
    oldTLV = _parentNodeTL.value;
    _parentNodeTL.value := Some myNode;

    //execute
    try

        _ = action myNode;
        myNode.msg := "";
        myNode.result := Right ();
        if empty? myNode.children then
            withParents myNode do n: n.rights := n.rights + 1 done;
        fi;
    catch AssertionFailedError ex:
        withParents myNode do n: n.fails := n.fails + 1 done;
        myNode.msg := "fail: \(ex#getMessage())";
        myNode.result := Fail ex;
    catch java.lang.Exception ex:
        withParents myNode do n: n.exceptions := n.exceptions + 1 done;
        myNode.msg := "exception: \(ex)";
        myNode.result := Exception ex;
    finally
        //reset the parent node
        _parentNodeTL.value := oldTLV;
    yrt;
    myNode;
);



_subSpec specName name action = (
    _ = _specs none (specName ^ name) action;
   ()
);

withParentNode maybeParentNode action = (
    old = _parentNodeTL.value;
    _parentNodeTL.value := maybeParentNode;
    try
        action ();
    finally
        _parentNodeTL.value := old;
    yrt
);

///Main function to define a a number of specifiations. Conventionally
///the rsult of the function call should be the value of a spec module.
///inside the specification define different specifications or use
///describe/should definitions.
///The result of is a unit-function which when executed runs the sub and retunrs
///a structure wich can be converted to the final testresults with testResult
specificationsFor name action maybeParentNode =
     _specs maybeParentNode "specifications for: \(name)" action;

specSuite name specs maybeParentNode =(
    _specs maybeParentNode "specSuite \(name)" do node:
        snode = Some node;
        for specs do spec:
            _= spec snode;
        done;
    done;
);



_printTestResult printer result indent = (
    printer (strPad " " indent "");
    if empty? result.children then
       case result.result of
            Right (): (
                printer "success:   \(result.name) \n";
            );

            Exception ex: (
                ex2 is ~Exception = ex;
                str = _exceptionStackTrace 1000 ex2;
                printer "exception: \(result.name)\n";
                printer "\(strPad ' ' (indent + 2) '') : \(ex2#getMessage()) \n";
                printer "\(strPad " " (indent + 2) "") : \(str) \n";
            );

            Fail ex: (
                ex2 is ~AssertionFailedError = ex;
                str = _exceptionStackTrace 1 ex2;
                printer "fail:      \(result.name)\n";
                printer "\(strPad " " (indent + 2) "") : \(ex2#getMessage()) \n";
                printer "\(strPad " " (indent + 2) "") : \(str) \n";
            );
       esac;

       if result.fails > 0 or result.exceptions > 0 then
            if result.exceptions > 0 then
            else

            fi;
       else
       fi
   else
       if result.exceptions > 0 then
            printer "exception: ";
       elif result.fails > 0 then
            printer "fail:      ";
       else
            printer "success:   ";
       fi;
       printer "\(result.name) (s:\(result.rights), f:\(result.fails), e:\(result.exceptions))\n";

       for result.children do child: 
            _printTestResult printer child (indent + 2)
       done;
       printer "\n";
   fi
);

createJUnitTest specResult prefix first is resultNode -> string -> boolean -> ~Test =
    if empty? specResult.children then
        class YebspecTestCase(String name) extends TestCase(name)
            void runBare()
                case specResult.result of
                    Right (): ();
                    Exception ex: (ex2 is ~Exception = ex;
                                   throw ex2);
                                   
                    Fail ex: (ex2 is ~AssertionFailedError = ex;throw ex2);
                esac;
            ,
        end;
        new YebspecTestCase(prefix ^ specResult.name) as ~Test;
    else
        suite = new TestSuite(specResult.name);
        prefixN = if first then prefix else prefix ^ "\(specResult.name) > " fi;
        for specResult.children do child:
            suite#addTest(createJUnitTest child prefixN false);
        done;
        suite as ~Test;
    fi;

{

 
    junitTest specs = (

        result = specs none;
        t = createJUnitTest result "" true;
        println "test: \(t)";
        t;
    ),

    setTLResultNode node = _parentNodeTL.value := node,

    specificationsFor,
    specification name action = _subSpec "specification: " name action,
    describe name action = _subSpec "describe: " name action,
    should name action = _subSpec "should: " name action,

    printResult printer result = (
        printer("\n-------------------------------");
        printer("\n Y e b   Y e t i   S p e c s");
        printer("\n-------------------------------\n");
        _printTestResult printer result 0;
        msg = if result.exceptions > 0 or result.fails > 0 then "FAILURE" else "SUCCESS" fi;
        printer("Result: \(msg):\n");
        total = result.rights + result.fails + result.exceptions;
        printer "Specs run: \(total), failed:\(result.fails), exceptions:\(result.exceptions)\n";
        printer("===== E N D   Y e b   Y e t i   S p e c s\n");
    ),

    specSuite,



    testFail,
    fail () = testFail "spec failed",

    assertFail () = testFail "forced fail",
    assertLabel,
    assertThat,
    assertTrue, assertFalse,
    assertDefined,
    assertNotEmpty,
    assertEmpty,
    assertException,
    assertExceptionIs,
    assertFailWith,
    assertEquals, assertNotEquals, assertSame, assertEqualsObj,
    assertSome, assertSomeEquals, assertNone,
    assertLeft, assertRight,  assertRightEquals, assertLeftEquals,
    assertContains,assertContainsAll,assertEqualElements,

    //bulk check

    (<<~~) funLs valueLs  =
        concatMap do f: map f valueLs done funLs,

    (<<~) fun valueLs = map fun valueLs

    (==>) cond fun v = if cond v then fun () fi,

    listRandomInts, randomInts, listOneOf, oneOf, listListsOf, listsOf,

}