/// put module documentation here

module org.yeb.jsonSpec;

load org.yeb.yebspec;
load org.yeb.std;

load org.yeb.json;

specificationsFor "org.yeb.json"\(

    describe "make a json string" \(
        should "transfer a struct to json string and return the value again" \(
            customer = {name="John", age=3, items=[1,2,3]};
            str = writeJSON customer [];
            wr = parseJSON str;
            assertEquals (wr.str "name") "John";
            assertEquals (wr.num "age") 3;
            //foo;
            r = wr.list "items" jsonNum;
            //head r;
            assertEquals r [1,2,3];
        )
    );

    describe "to yeti conversation" \(
        customer = {name="John",
                    age=23,
                    price=3.2,
                    male=true,
                    items = [1 .. 20],
                    names = ["chris":1,"paul":2,"elis":3],
                    father={name="Paul",age=40},
                    children= map do c : {name="child\(c)",age=c} done [1 .. 5],
                   };
        str = writeJSON customer [];
        jmap = parseJSON str;

        should "make struct from string" \(
            stru = fromJSON str;
            assertEquals "John" stru.name;
            assertEquals 23 stru.age;
            assertEquals "hier" stru.age;
            assertEquals 3.2 stru.price;
            assertEquals [1..20] stru.items;
            assertEquals ["chris":1, "paul":2, "elis":3] stru.names;
            assertEquals 1 stru.names.["chris"];
            assertEquals stru customer;
            assertEquals "Paul" stru.father.name;
            assertNone (maybeDefined \none Some stru.nofield);
        );
            
        
        should "unpeek a string" \(
            assertEquals "John" (jmap.str "name");
        );

        should "unpeek a int" \(
            assertEquals 23 (jmap.num "age");
        );

        should "unpeek a double" \(
            assertEquals 3.2 (jmap.num "price");
        );

        should "unpeek a boolean" \(
            assertEquals true (jmap.bool "male");
        ); 


        should "unpeek a struct" \(
            r = {name = (jmap.obj "father").str "name",
                 age = (jmap.obj "father").num "age"};
            
            assertEquals {name="Paul",age=40} r;
        );

        should "unpeek a list" \(
            assertEquals [1 .. 20] (jmap.list "items" jsonNum);
        );

        should "unpeek a hash" \(
            ns = jmap.hash "names" jsonStr jsonNum;
            assertEquals ["chris":1,"paul":2,"elis":3] ns;
        );

        should "unpeek a list of structs"  \(
            r = jmap.list "children" jsonObj 
                |> map do obj:
                    {name = obj.str "name", age = obj.num "age"}
                done;
            assertEquals r customer.children;
        ); 
    );

)

