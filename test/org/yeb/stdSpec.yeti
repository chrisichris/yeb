module org.yeb.stdSpec;

load org.yeb.std;
load org.yeb.yebspec;

specificationsFor "org.yeb.std"\(

    describe "randomList" \(
        should "return a random list of doubles" \(
            ls = randomList () |> take 1000;
            assertEquals 1000 (length ls);
            for ls do v: assertTrue (v > 0 and v < 1) done;
        );
    );
    describe "getSome" \(
        should "give value of Some" \(
            assertSame (getSome (Some 1)) 1);
        should "fail if none" \(
            assertFailWith \(getSome none)));


    describe "validateFn" \(
        load org.yeb.validation;
        should "execute not valid if not valid" \(
            var f = false;
            validateFn \(f := true) \(f:=false) (valiString 100 120) "";
            assertTrue f;
        );
        should "execute valid if valid" \(
            var f = false;
            validateFn \(f := false) \(f:=true) (valiString 1 10 ) "a";
            assertTrue f;
        );
    );

    describe "validOr" \(
        load org.yeb.validation;
        should "return the value if valid" \(
            assertEquals "a" (validOr "b" \("a" |> valiString 1 10 )));
        should "return the alternativ value if valid" \(
            assertEquals "b" (validOr "b" \("a" |> valiString 100 120)));
        );

    describe "maybeValid" \(
        load org.yeb.validation;
        should "execute not valid if not valid" \(
            var f = false;
            maybeValid \(f := true) \(f:=false) \("" |> valiString 100 120);
            assertTrue f;
        );
        should "execute valid if valid" \(
            var f = false;
            maybeValid \(f := false) \(f:=true) \("a" |> valiString 1 10 );
            assertTrue f;
        );
    );
    
    describe "async invocation" \(
        should "execute and return the future" \(
            future = async [] \2;
            assertDefined future);
    );
);
