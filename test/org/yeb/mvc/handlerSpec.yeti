/// put module documentation here

module org.yeb.mvc.handlerSpec;

import org.springframework.mock.web:MockServletContext, MockHttpServletRequest, MockHttpServletResponse, MockFilterChain;

load org.yeb.std;
load org.yeb.yebspec;

load org.yeb.mvc.handler;

load org.yeb.validation;

specificationsFor "org.yeb.mvc.handler" \(

    specification "of a handler which takes more than the context" \(
        ct = mockCtxt [Param ["foo":"2","str":"pstr"], Params ["faa":["1","2"], "mix":["name","2"]]];
        describe "handler with user" \(
            should "get the right user" \(
                ha ctxt = (_ = ctxt.user;true);
                rh = regexHandler (All "/foo") ha;
                rh (ct with {user = "foo"});
            );
        );
    );


    specification "of smale handleradapters" \(
        describe "id handler should return same handerl" \(
			hd = do x: true done;
            assertSame hd (idHandler hd);
        );

        describe "runHandler" \(
            var c = array [false,false,false,false];
            resetC _ = c := array [false,false,false,false];
            handlers = array [ \( c.[0] := true; false),
                            \( c.[1] := true; false),
                            \( c.[2] := true; false),
                            \( c.[3] := true; false)];

            should "continues run if goon" \(
                r = runHandlers (list handlers) (mockCtxt []);
                assertEquals false r;
                assertEquals [true,true,true,true] (list c);
            );
            should "continue until handled" \(
                resetC ();
                handlers.[2] := \(c.[2] := true; true);
                r = runHandlers (list handlers) (mockCtxt []);
                assertEquals true r;
                assertEquals [true,true,true,false] (list c);
            );

        );



        describe "regexHandler" \(
            should "match a regex and put parameters in request" \(
                var p1 = -1;
                var p2 = "";
                rh = regexHandler (All ":num/*") do c:
                    p1 := param c "num" |> (valiNum 0 1000 . strToNum);
                    p2 := param c "rest";
                    true;
                done;
                r = rh (mockCtxt [Get "23/foo"]);
                assertEquals true r;
                assertEquals 23 p1;
                assertEquals p2 "foo";

            );

            should "not call handler and return goonResult if no match" \(
                var called = false;
                rh = regexHandler (All "index") 
                    do: called := true; true done;
                assertEquals false (rh (mockCtxt [Get "/"]));
                assertFalse called;
            );

            should "respect method " \(
                var called = false;
                rh = regexHandler (Post "index") do:
                    called := true;
                    true
                done;

                assertEquals false (rh (mockCtxt [Get "index"]));
                assertFalse called;

                assertEquals true (rh (mockCtxt [Post "index"]));
                assertTrue called;

            );

            should "take any method if all method given" \(
                var called = false;
                rh = regexHandler (All 'index') do:
                    called := true;
                    true;
                done;

                assertEquals true (rh (mockCtxt [Get "index"]));
                assertTrue called;

                called := false;
                assertEquals true (rh (mockCtxt [Post "index"]));
                assertTrue called;

            );

            should "set as servletPath the unmatched part" \(
                var sp = "";
                var pi = "";
                rh = regexHandler (All 'index/*') do c:
                    sp := (request c)#getServletPath();
                    pi := (request c)#getPathInfo();
                    true;
                done;

                _ = rh (mockCtxt [Get "index/foo"]);
                assertEquals sp "index/";
                assertEquals pi "foo";

                _ = rh (mockCtxt [Get "index/"]);
                assertEquals sp "index/";
                assertEquals pi "";
            );
           
        );

     );

)

