/// put module documentation here

module org.yeb.mvc.handlerSpec;

import org.springframework.mock.web:MockServletContext, MockHttpServletRequest, MockHttpServletResponse, MockFilterChain;

load org.yeb.std;
load org.yeb.yebspec;

load org.yeb.mvc.handler;

load org.yeb.validation;

specificationsFor "org.yeb.mvc.handler" \(

    specification "of a handler which takes more than the context" \(
        ct = mockCtxt [Param ["foo":"2","str":"pstr"], Params ["faa":["1","2"], "mix":["name","2"]]];
        describe "handler with user" \(
            should "get the right user" \(
                ha ctxt = (_ = ctxt.user;skipResult);
                rh = regexHandler "/foo" ha;
                rh (ct with {user = "foo"});
            );
        );
    );

    specification "of url pattern to regex in YebUtils.patternToRegex" \(
        describe "no pattern" \(
            should "return exactly same string" \(
                assertEquals '\Qsome/pattern/here\E' (urlPatternToRegex "some/pattern/here"));
            should "does not escape regex" \(
                assertEquals '\Qsome.do\E' (urlPatternToRegex "some.do"));
        );

        describe "in curly patterns" \(
            should "{*} pattern lead to all regex" \(
                assertEquals "\\Qsome/pattern/\\E(.*)" (urlPatternToRegex "some/pattern/{*}"));
            should "{} pattern lead to + regex" \(
                assertEquals  "\\Qsome/\\E([^/]+)\\Q/pattern/\\E" (urlPatternToRegex "some/{}/pattern/"));
            should "{d} pattern lead to number regex" \(
                assertEquals "\\Qsome/\\E([\\d^/]+)\\Q/pattern/\\E"  (urlPatternToRegex "some/{d}/pattern/"));
            should "{w} pattern lead to word regex" \(
                assertEquals "\\Qsome/\\E([\\w^/]+)\\Q/pattern/\\E" (urlPatternToRegex "some/{w}/pattern/"));
        );

        describe "corner brackets " \(
            should "to normal regex" \(
                assertEquals "\\Qsome/\\E(fooregex)\\Q/pattern\\E" (urlPatternToRegex "some/<fooregex>/pattern"));
            should "not to regex if not closed" \(
                assertException \(urlPatternToRegex "some/<fooregex/pattern"));
            should "escape full string" \(
                assertEquals "(.mehr)" (urlPatternToRegex "<.mehr>"));
        );
        describe "corner cases" \(
            should "add single {" \(
                assertException \(urlPatternToRegex "some/{/hier"));
            should "add single {{" \(
                assertException \(urlPatternToRegex "some/{{}/hier"));
            should "add work last <" \(
                assertException \(urlPatternToRegex "some/<"));
        );
        describe "combined" \(
            should "regexes" \(
                assertEquals "\\Qsome/./\\E([^/]+)\\Q/\\E([\\d^/]+)\\Q/\\E(reg)\\Q/\\E(.*)"
                    (urlPatternToRegex "some/./{}/{d}/<reg>/{*}"));
        );

        describe "splitoff until ::" \(
            should "split off and put together" \(
                assertEquals "get::\\Qsome\\E" (urlPatternToRegex "get::some"));
            should "split off and make pattern" \(
                assertEquals "get::\\Qsome/\\E(.*)" (urlPatternToRegex "get::some/{*}"));
            should "split off and make single pattern" \(
                assertEquals "get::(.*)" (urlPatternToRegex "get::{*}"));
        );
    );

    specification "of smale handleradapters" \(
        describe "goon handler sould return gootnResult" \(
                assertEquals goonResult (goonHandler (mockCtxt []));
        );
        describe "id handler should return same handerl" \(
            assertSame goonHandler (idHandler goonHandler);
        );
        describe "if handler" \(
            should "not execute subhandler if condidtion false" \(
                var executed = false;
                h = ifHandler \false
                        \(executed := true; skipResult);
                assertSame goonResult (h (mockCtxt []));
                assertFalse executed;
            );
            should "execute subhandler if condition true" \(
                var executed = false;
                h = ifHandler \true  \(executed := true; skipResult);
                assertSame skipResult (h (mockCtxt []));
                assertTrue executed;
            );
        );
        describe "toHandler" \(
            should "set have the called context as thread local" \(
                var called = false;
                ctx = mockCtxt [];
                handler = toHandler do c:
                    called := true;
                    assertSame (request ctx) (request c);
                    assertSame (response ctx) (response c);
                    assertSame ctx c;
                done;
                r = handler ctx;
                assertTrue called;
            );
            should "return handledResult if no explicit return" \(
                r = (toHandler \()) (mockCtxt []);
                assertEquals r handledResult;
            );
            should "return result of handler which is seth on resultTH" \(
                res = {status = 3};
                r = (toHandler \(resultTH.value := res)) (mockCtxt []);
                assertSame r res;
            );

        );

        describe "runHandler" \(
            var c = array [false,false,false,false];
            resetC _ = c := array [false,false,false,false];
            handlers = array [ \( c.[0] := true; goonResult),
                            \( c.[1] := true; goonResult),
                            \( c.[2] := true; goonResult),
                            \( c.[3] := true; goonResult)];

            should "continues run if goon" \(
                r = runHandlers (list handlers) (mockCtxt []);
                assertEquals goonResult r;
                assertEquals [true,true,true,true] (list c);
            );
            should "continue until handled" \(
                resetC ();
                handlers.[2] := \(c.[2] := true; handledResult);
                r = runHandlers (list handlers) (mockCtxt []);
                assertEquals handledResult r;
                assertEquals [true,true,true,false] (list c);
            );

            should "continue until skip" \(
                resetC ();
                handlers.[2] := \(c.[2] := true; skipResult);
                r = runHandlers (list handlers) (mockCtxt []);
                assertEquals skipResult r;
                assertEquals [true,true,true,false] (list c);
            );
        );



        describe "regexHandler" \(
            should "match a regex and put parameters in request" \(
                var p1 = -1;
                var p2 = "";
                rh = regexHandler '(\d+)/(.+)' (toHandler do c:
                    p1 := param c "_1" |> (valiNum 0 1000 . strToNum);
                    p2 := param c "_2";
                done);
                r = rh (mockCtxt [Get "23/foo"]);
                assertEquals handledResult r;
                assertEquals 23 p1;
                assertEquals p2 "foo";

            );

            should "not call handler and return goonResult if no match" \(
                var called = false;
                rh = regexHandler 'index' (toHandler \(called := true));
                assertEquals goonResult (rh (mockCtxt [Get "/"]));
                assertFalse called;
            );

            should "take method seperated with :: " \(
                var called = false;
                rh = regexHandler 'post::index' (toHandler \(called := true));

                assertEquals goonResult (rh (mockCtxt [Get "index"]));
                assertFalse called;

                assertEquals handledResult (rh (mockCtxt [Post "index"]));
                assertTrue called;

            );

            should "take any method if no method given" \(
                var called = false;
                rh = regexHandler 'index' (toHandler \(called := true));

                assertEquals handledResult (rh (mockCtxt [Get "index"]));
                assertTrue called;

                called := false;
                assertEquals handledResult (rh (mockCtxt [Post "index"]));
                assertTrue called;

            );

           
        );

        describe "subRegexHandler" \(
            should "set as servletPath the unmatched part" \(
                var sp = "";
                var pi = "";
                rh = subRegexHandler 'index/' (toHandler do c:
                    sp := (request c)#getServletPath();
                    pi := (request c)#getPathInfo();
                done);

                _ = rh (mockCtxt [Get "index/foo"]);
                assertEquals sp "index/";
                assertEquals pi "foo";

                _ = rh (mockCtxt [Get "index/"]);
                assertEquals sp "index/";
                assertEquals pi "";
            );
        );
     );



)

