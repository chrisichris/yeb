/// put module documentation here

module org.yeb.sqlSpec;

import java.lang:Thread;
import java.sql.Connection;
import org.springframework.jdbc.datasource.embedded:EmbeddedDatabaseBuilder;
import org.mockito:Mockito;

load org.yeb.yebspec;
sql = load org.yeb.sql;
load org.yeb.std;

withDS code = 
   (builder = new EmbeddedDatabaseBuilder();
    ds = builder#addScript("test-schema.sql")#build();
    try 
        code ds;   
    finally ds#shutdown() yrt);

withDSCon code =
    withDS do ds: sql.withConnection ds code done;

specificationsFor "org.yeb.db"\(

    describe "fresh defined datasource" \(

        should "define a datasource for our test-schema" \(
            withDS do ds: assertDefined ds done;
        );

        should "have a datasource with everything defined" \(
            withDSCon do ds:
                assertDefined ds.rollbackOnly?;
                assertDefined ds.connection;
                assertDefined ds.operateStatement;
            done;
        );

        should "be set to not rollback" \(
            withDSCon do ds:
                assertFalse ds.rollbackOnly?;
            done;
        );

        should "be set to rollbackonly" 
            \(withDSCon do ds:
                assertFalse ds.rollbackOnly?;
                ds.rollbackOnly();
                assertTrue ds.rollbackOnly?;
            done);

        should "have no autocommit" 
            \(withDSCon do ds:
                assertFalse ds.connection#getAutoCommit();
            done);

        should "close the connection afterwards"
          \(con =  withDSCon do ds: 
                assertFalse ds.connection#isClosed();
                ds.connection 
            done;
            assertTrue con#isClosed());
            
        should "commit"
          \(ds = Mockito#mock(loadClass "javax.sql.DataSource") 
                unsafely_as ~javax.sql.DataSource;
            con = Mockito#mock(loadClass "java.sql.Connection") 
                unsafely_as ~java.sql.Connection;
            Mockito#when(ds#getConnection())#thenReturn(con);
            ch = sql.withConnection ds do ch:
                assertSame con ch.connection;
                ch done;
            assertFalse ch.rollbackOnly?;
            
            ( Mockito#verify(con,Mockito#times(1)) unsafely_as ~Connection)
                #commit();
            ( Mockito#verify(con,Mockito#never()) unsafely_as ~Connection)
                #rollback());
            
        should "rollback on rollbackonly"
          \(ds = Mockito#mock(loadClass "javax.sql.DataSource") 
                unsafely_as ~javax.sql.DataSource;
            con = Mockito#mock(loadClass "java.sql.Connection") 
                unsafely_as ~java.sql.Connection;
            Mockito#when(ds#getConnection())#thenReturn(con);
            
            ch = sql.withConnection ds do ch:
                assertSame con ch.connection;
                ch.rollbackOnly ();
                ch done;
            assertTrue ch.rollbackOnly?;
            
            ( Mockito#verify(con,Mockito#never()) unsafely_as ~Connection)
                #commit();
            ( Mockito#verify(con,Mockito#times(1)) unsafely_as ~Connection)
                #rollback());

        should "rollback on exception"
          \(ds = Mockito#mock(loadClass "javax.sql.DataSource") 
                unsafely_as ~javax.sql.DataSource;
            con = Mockito#mock(loadClass "java.sql.Connection") 
                unsafely_as ~java.sql.Connection;
            Mockito#when(ds#getConnection())#thenReturn(con);
            
            assertFailWith \( 
                sql.withConnection ds do ch:
                    assertSame con ch.connection;
                    failWith "some excption";
                done;
            );
            
            ( Mockito#verify(con,Mockito#never()) unsafely_as ~Connection)
                #commit();
            ( Mockito#verify(con,Mockito#times(1)) unsafely_as ~Connection)
                #rollback());

    );


    describe "select a list" \(
        should "normal select by name" \(
            withDSCon do ds:
                result = sql.list 
                    "select USER_ID, USER_NAME from users" [] 
                    do rs:
                        rs.str "USER_NAME"
                    done ds;
                assertEquals 3 (length result);
                assertTrue (contains? "admin" result);
            done;
        );
        should "select with wehere" \(
            withDSCon do ds:
                result = sql.list 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [1:!] 
                    do rs:
                        rs.str "USER_NAME"
                    done 
                    ds;
                assertEquals 1 (length result);
                assertTrue (contains? "admin" result);
            done;
        );
    );

    describe "select a list struct" \(
        should "normal select by name" \(
            withDSCon do ds:
                result = sql.listStruct 
                    "select USER_ID, USER_NAME from users" [] ds;
                assertEquals 3 (length result);
                ls = result |> map (.user_name);
                println "************************************************";
                println result;
                
                assertTrue (contains? "admin" ls);
            done;
        );
        should "select with where" \(
            withDSCon do ds:
                result = sql.listStruct 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [1:!] 
                    ds;
                assertEquals 1 (length result);
                ls = result |> map (.user_name);
                assertTrue (contains? "admin" ls);
            done;
        );
    );
    
    describe "select a option" \(
        should "select some" \(
            withDSCon do ds:
                result = sql.maybe 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [1:!]
                    \none    
                    do rs:
                        Some (rs.str "USER_NAME")
                    done 
                    ds;
                assertSomeEquals "admin" result;
            done;
        );
            
        should "select none" \(
            withDSCon do ds:
                result = sql.maybe 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [100:!]
                    \none
                    do rs:
                        Some (rs.str "USER_NAME")
                    done 
                    ds;
                    
                assertNone result;
            done;
        );
    );

    describe "select a struct" \(
        should "select some" \(
            withDSCon do ds:
                result = sql.maybeStruct 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [1:!]
                    \none    
                    (Some . (.user_name))
                    ds;
                assertSomeEquals "admin" result;
            done;
        );
            
        should "select none" \(
            withDSCon do ds:
                result = sql.maybeStruct 
                    "select USER_ID, USER_NAME from users where USER_ID = ?" 
                    [100:!]
                    \none
                    (Some . (.user_name))
                    ds;
                    
                assertNone result;
            done;
        );
    );
    
    describe "insert/update" \(
        should "insert one db value" \(
            withDSCon do ds:
                u = {userId = 4, userName="chrisi", password="foo"};
                _ = sql.insertEntity "users" u ds;
                r = sql.maybe 
                        "select USER_ID , USER_NAME, PASSWORD from users WHERE USER_ID = ? "
                        [4:!] 
                        \none
                        do rs:
                            Some {userId=rs.num "USER_ID",
                             userName=rs.str "USER_NAME",
                             password= rs.str "PASSWORD"} 
                        done ds;
                assertSomeEquals u r;
            done;
        );

        should "update one db value where" \(
            withDSCon do ds:
                u = {password="foo"};
                _ = sql.updateEntity "users" u "WHERE USER_ID=?" [1:!] ds;
                r = sql.maybe 
                        "select PASSWORD from users WHERE USER_ID = ? "
                        [1:!] 
                        \none
                        do rs: Some {password = rs.str "PASSWORD"} done ds;
                assertSomeEquals u r;
            done;
        );

        should "update one db value with struct" \(
            withDSCon do ds:
                u = {userId=1,password="foo"};
                _ = sql.updateById "users" u ds;
                r = sql.maybe
                        "select PASSWORD from users WHERE USER_ID = ? "
                        [1:!]
                        \none
                        do rs: 
                            Some {password = rs.str "PASSWORD", userId = 1} 
                        done ds;
                assertSomeEquals u r;
            done;
        );
    );

    describe "camelCaseToUnderline" \(
        should "make normal camel case to underline" \(
            assertEquals "some_foo_customer" YebUtils#camelCaseToUnderline("someFooCustomer");
        );

        should "underline first character if uppercase" \(
            assertEquals "_some_foo_customer" YebUtils#camelCaseToUnderline("SomeFooCustomer");
        );

        should "underline muitiple uppercase also at end but not in between" \(
            assertEquals "java_sql_exception" YebUtils#camelCaseToUnderline("javaSQLException");
        );

        should "not touch normal underline" \(
            assertEquals "java_sql_exception" YebUtils#camelCaseToUnderline("java_sql_exception");
        );

    );

    describe "underlineToUppercase" \(
        should "make normal camel case to underline" \(
            assertEquals "someFooCustomer" YebUtils#underlineToCamelCase("some_foo_customer");
        );
    );
    
)

